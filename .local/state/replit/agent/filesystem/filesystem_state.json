{"file_contents":{"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/routes.ts":{"content":"import { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { requireAdmin } from \"./authMiddleware\"; // You should implement this middleware\nimport bcrypt from \"bcrypt\";\nimport {\n  insertHeroSlideSchema,\n  insertNewsSchema,\n  insertEventSchema,\n  insertPlayerSchema,\n  insertClubSchema,\n  insertLeaderSchema,\n  insertMediaSchema,\n  insertAffiliationSchema,\n  insertContactSchema,\n  insertSiteSettingSchema,\n  insertAdminSchema\n} from \"@shared/schema\";\n\n/**\n * Registers all CRUD API routes for the application.\n * Includes endpoints for: Hero Slides, News, Events, Players, Clubs, Leaders, \n * Media, Affiliations, Contacts, and Site Settings.\n * Protected routes require admin authentication via JWT.\n */\nexport function registerAllRoutes(app: Express): Server {\n\n  // ---------- HERO SLIDES ----------\n  app.get(\"/api/hero-slides\", async (req, res) => {\n    try { res.json(await storage.getAllHeroSlides()); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.get(\"/api/hero-slides/:id\", async (req, res) => {\n    try {\n      const slide = await storage.getHeroSlide(parseInt(req.params.id));\n      if (!slide) return res.status(404).json({ error: \"Slide not found\" });\n      res.json(slide);\n    } catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.post(\"/api/hero-slides\", requireAdmin, async (req, res) => {\n    try {\n      const slide = await storage.createHeroSlide(insertHeroSlideSchema.parse(req.body));\n      res.status(201).json(slide);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.patch(\"/api/hero-slides/:id\", requireAdmin, async (req, res) => {\n    try {\n      const slide = await storage.updateHeroSlide(parseInt(req.params.id), req.body);\n      if (!slide) return res.status(404).json({ error: \"Slide not found\" });\n      res.json(slide);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.delete(\"/api/hero-slides/:id\", requireAdmin, async (req, res) => {\n    try { await storage.deleteHeroSlide(parseInt(req.params.id)); res.status(204).send(); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n\n  // ---------- NEWS ----------\n  app.get(\"/api/news\", async (req, res) => {\n    try { res.json(await storage.getAllNews()); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.get(\"/api/news/:id\", async (req, res) => {\n    try {\n      const article = await storage.getNews(parseInt(req.params.id));\n      if (!article) return res.status(404).json({ error: \"News not found\" });\n      res.json(article);\n    } catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.post(\"/api/news\", requireAdmin, async (req, res) => {\n    try {\n      const article = await storage.createNews(insertNewsSchema.parse(req.body));\n      res.status(201).json(article);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.patch(\"/api/news/:id\", requireAdmin, async (req, res) => {\n    try {\n      const article = await storage.updateNews(parseInt(req.params.id), req.body);\n      if (!article) return res.status(404).json({ error: \"News not found\" });\n      res.json(article);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.delete(\"/api/news/:id\", requireAdmin, async (req, res) => {\n    try { await storage.deleteNews(parseInt(req.params.id)); res.status(204).send(); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n\n  // ---------- EVENTS ----------\n  app.get(\"/api/events\", async (req, res) => {\n    try { res.json(await storage.getAllEvents()); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.get(\"/api/events/:id\", async (req, res) => {\n    try {\n      const event = await storage.getEvent(parseInt(req.params.id));\n      if (!event) return res.status(404).json({ error: \"Event not found\" });\n      res.json(event);\n    } catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.post(\"/api/events\", requireAdmin, async (req, res) => {\n    try {\n      const event = await storage.createEvent(insertEventSchema.parse(req.body));\n      res.status(201).json(event);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.patch(\"/api/events/:id\", requireAdmin, async (req, res) => {\n    try {\n      const event = await storage.updateEvent(parseInt(req.params.id), req.body);\n      if (!event) return res.status(404).json({ error: \"Event not found\" });\n      res.json(event);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.delete(\"/api/events/:id\", requireAdmin, async (req, res) => {\n    try { await storage.deleteEvent(parseInt(req.params.id)); res.status(204).send(); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n\n  // ---------- PLAYERS ----------\n  app.get(\"/api/players\", async (req, res) => {\n    try { res.json(await storage.getAllPlayers()); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.get(\"/api/players/:id\", async (req, res) => {\n    try {\n      const player = await storage.getPlayer(parseInt(req.params.id));\n      if (!player) return res.status(404).json({ error: \"Player not found\" });\n      res.json(player);\n    } catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.post(\"/api/players\", requireAdmin, async (req, res) => {\n    try {\n      const player = await storage.createPlayer(insertPlayerSchema.parse(req.body));\n      res.status(201).json(player);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.patch(\"/api/players/:id\", requireAdmin, async (req, res) => {\n    try {\n      const player = await storage.updatePlayer(parseInt(req.params.id), req.body);\n      if (!player) return res.status(404).json({ error: \"Player not found\" });\n      res.json(player);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.delete(\"/api/players/:id\", requireAdmin, async (req, res) => {\n    try { await storage.deletePlayer(parseInt(req.params.id)); res.status(204).send(); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n\n  // ---------- CLUBS ----------\n  app.get(\"/api/clubs\", async (req, res) => {\n    try { res.json(await storage.getAllClubs()); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.get(\"/api/clubs/:id\", async (req, res) => {\n    try {\n      const club = await storage.getClub(parseInt(req.params.id));\n      if (!club) return res.status(404).json({ error: \"Club not found\" });\n      res.json(club);\n    } catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n  app.post(\"/api/clubs\", requireAdmin, async (req, res) => {\n    try {\n      const club = await storage.createClub(insertClubSchema.parse(req.body));\n      res.status(201).json(club);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.patch(\"/api/clubs/:id\", requireAdmin, async (req, res) => {\n    try {\n      const club = await storage.updateClub(parseInt(req.params.id), req.body);\n      if (!club) return res.status(404).json({ error: \"Club not found\" });\n      res.json(club);\n    } catch (e:any) { res.status(400).json({ error: e.message }); }\n  });\n  app.delete(\"/api/clubs/:id\", requireAdmin, async (req, res) => {\n    try { await storage.deleteClub(parseInt(req.params.id)); res.status(204).send(); }\n    catch (e:any) { res.status(500).json({ error: e.message }); }\n  });\n\n  // ---------- LEADERS ----------\n  app.get(\"/api/leaders\", async (req, res) => { try { res.json(await storage.getAllLeaders()); } catch(e:any){ res.status(500).json({ error:e.message }); } });\n  app.get(\"/api/leaders/:id\", async (req,res)=>{ try{ const leader = await storage.getLeader(parseInt(req.params.id)); if(!leader) return res.status(404).json({error:\"Leader not found\"}); res.json(leader); } catch(e:any){ res.status(500).json({error:e.message}); } });\n  app.post(\"/api/leaders\", requireAdmin, async (req,res)=>{ try{ const leader = await storage.createLeader(insertLeaderSchema.parse(req.body)); res.status(201).json(leader); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.patch(\"/api/leaders/:id\", requireAdmin, async (req,res)=>{ try{ const leader = await storage.updateLeader(parseInt(req.params.id), req.body); if(!leader) return res.status(404).json({error:\"Leader not found\"}); res.json(leader); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.delete(\"/api/leaders/:id\", requireAdmin, async (req,res)=>{ try{ await storage.deleteLeader(parseInt(req.params.id)); res.status(204).send(); } catch(e:any){ res.status(500).json({error:e.message}); } });\n\n  // ---------- MEDIA ----------\n  app.get(\"/api/media\", async (req,res)=>{ try{ res.json(await storage.getAllMedia()); } catch(e:any){ res.status(500).json({error:e.message}); } });\n  app.get(\"/api/media/:id\", async (req,res)=>{ try{ const item = await storage.getMediaItem(parseInt(req.params.id)); if(!item) return res.status(404).json({error:\"Media not found\"}); res.json(item); } catch(e:any){ res.status(500).json({error:e.message}); } });\n  app.post(\"/api/media\", requireAdmin, async (req,res)=>{ try{ const item = await storage.createMedia(insertMediaSchema.parse(req.body)); res.status(201).json(item); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.patch(\"/api/media/:id\", requireAdmin, async (req,res)=>{ try{ const item = await storage.updateMedia(parseInt(req.params.id), req.body); if(!item) return res.status(404).json({error:\"Media not found\"}); res.json(item); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.delete(\"/api/media/:id\", requireAdmin, async (req,res)=>{ try{ await storage.deleteMedia(parseInt(req.params.id)); res.status(204).send(); } catch(e:any){ res.status(500).json({error:e.message}); } });\n\n  // ---------- AFFILIATIONS ----------\n  app.get(\"/api/affiliations\", async (req,res)=>{ try{ res.json(await storage.getAllAffiliations()); } catch(e:any){ res.status(500).json({error:e.message}); } });\n  app.post(\"/api/affiliations\", requireAdmin, async (req,res)=>{ try{ const aff = await storage.createAffiliation(insertAffiliationSchema.parse(req.body)); res.status(201).json(aff); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.patch(\"/api/affiliations/:id\", requireAdmin, async (req,res)=>{ try{ const aff = await storage.updateAffiliation(parseInt(req.params.id), req.body); if(!aff) return res.status(404).json({error:\"Affiliation not found\"}); res.json(aff); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.delete(\"/api/affiliations/:id\", requireAdmin, async (req,res)=>{ try{ await storage.deleteAffiliation(parseInt(req.params.id)); res.status(204).send(); } catch(e:any){ res.status(500).json({error:e.message}); } });\n\n  // ---------- CONTACTS ----------\n  app.get(\"/api/contacts\", requireAdmin, async (req,res)=>{ try{ res.json(await storage.getAllContacts()); } catch(e:any){ res.status(500).json({error:e.message}); } });\n  app.post(\"/api/contacts\", async (req,res)=>{ try{ const contact = await storage.createContact(insertContactSchema.parse(req.body)); res.status(201).json(contact); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.patch(\"/api/contacts/:id\", requireAdmin, async (req,res)=>{ try{ const contact = await storage.updateContact(parseInt(req.params.id), req.body); if(!contact) return res.status(404).json({error:\"Contact not found\"}); res.json(contact); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.delete(\"/api/contacts/:id\", requireAdmin, async (req,res)=>{ try{ await storage.deleteContact(parseInt(req.params.id)); res.status(204).send(); } catch(e:any){ res.status(500).json({error:e.message}); } });\n\n  // ---------- SITE SETTINGS ----------\n  app.get(\"/api/site-settings\", async (req,res)=>{ try{ res.json(await storage.getAllSiteSettings()); } catch(e:any){ res.status(500).json({error:e.message}); } });\n  app.post(\"/api/site-settings\", requireAdmin, async (req,res)=>{ try{ const setting = await storage.createSiteSetting(insertSiteSettingSchema.parse(req.body)); res.status(201).json(setting); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.patch(\"/api/site-settings/:id\", requireAdmin, async (req,res)=>{ try{ const setting = await storage.updateSiteSetting(parseInt(req.params.id), req.body); if(!setting) return res.status(404).json({error:\"Setting not found\"}); res.json(setting); } catch(e:any){ res.status(400).json({error:e.message}); } });\n  app.delete(\"/api/site-settings/:id\", requireAdmin, async (req,res)=>{ try{ await storage.deleteSiteSetting(parseInt(req.params.id)); res.status(204).send(); } catch(e:any){ res.status(500).json({error:e.message}); } });\n\n  // ---------- ADMIN MANAGEMENT ----------\n  /**\n   * Admin Management Endpoints\n   * Allows authenticated admins to manage other admin accounts\n   */\n  app.get(\"/api/admins\", requireAdmin, async (req,res)=>{ \n    try{ \n      res.json(await storage.getAllAdmins()); \n    } catch(e:any){ \n      res.status(500).json({error:e.message}); \n    } \n  });\n  \n  /**\n   * Create new admin account\n   * Requires: { name: string, email: string, passwordHash: string }\n   * Note: Password must be hashed with bcrypt before sending\n   */\n  app.post(\"/api/admins\", requireAdmin, async (req,res)=>{ \n    try{ \n      const { name, email, password } = req.body;\n      if (!name || !email || !password) {\n        return res.status(400).json({ error: \"Name, email, and password are required\" });\n      }\n      \n      // Check if admin with this email already exists\n      const existingAdmin = await storage.getAdminByEmail(email);\n      if (existingAdmin) {\n        return res.status(409).json({ error: \"Admin with this email already exists\" });\n      }\n      \n      // Hash password before storing (10 rounds of bcrypt)\n      const passwordHash = await bcrypt.hash(password, 10);\n      \n      const admin = await storage.createAdmin({ name, email, passwordHash });\n      // Return admin without password hash for security\n      res.status(201).json({ \n        id: admin.id, \n        name: admin.name, \n        email: admin.email, \n        createdAt: admin.createdAt \n      }); \n    } catch(e:any){ \n      res.status(400).json({error:e.message}); \n    } \n  });\n\n  return createServer(app);\n}","size_bytes":14436},"attached_assets/design_guidelines_1761313812227.md":{"content":"# Nigeria Rope Skipping Association (NRSA) Website Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from international sports federation websites (ijru.sport, ropeskippingsport.org) while incorporating strong Nigerian national identity. The design communicates legitimacy, professionalism, and athletic energy befitting an official governing body registered with Nigeria's Corporate Affairs Commission.\n\n## Core Design Principles\n- **Official & Legitimate**: Professional sports federation aesthetic with governmental formality\n- **Energetic & Dynamic**: Reflecting the athletic, competitive nature of rope skipping\n- **Nigerian Identity**: Strong national pride through color scheme and cultural elements\n- **International Standard**: Matching the visual quality of global sports federations\n\n## Color System\n**Primary Colors**:\n- Nigerian Green: #009739 (primary brand, CTAs, accents, active states)\n- White: #FFFFFF (backgrounds, text on dark sections)\n- Black: #000000 (text, footer background, contrast elements)\n\n**Gradients**: Green-to-white gradients for section headers and decorative banners\n**Accent Usage**: NRSA logo watermark at 10-15% opacity on section dividers\n\n## Typography\n**Font Families**: Poppins (primary) or Montserrat (alternative) via Google Fonts CDN\n\n**Hierarchy**:\n- Hero Headlines: Bold, 48-64px (desktop), 32-40px (mobile)\n- Section Headers: Bold, 36-48px with gradient underlines\n- Card Titles: Semi-bold, 20-24px\n- Body Text: Regular, 16-18px, line-height 1.6\n- Navigation: Medium, 16px\n- Footer: Regular, 14px\n\n## Layout System\n**Spacing Units**: Tailwind units of 4, 6, 8, 12, 16, 20, 24 for consistent rhythm\n\n**Container Widths**:\n- Full-width hero sections\n- Content sections: max-w-7xl\n- Text content: max-w-4xl\n\n**Grid Patterns**:\n- Event cards: 3-column (desktop) → 2-column (tablet) → 1-column (mobile)\n- Player profiles: 4-column → 2-column → 1-column\n- Club directory: 3-column → 2-column → 1-column\n- News cards: 3-column grid with featured first item spanning 2 columns\n\n## Component Library\n\n### Header & Navigation\n- **Logo Positioning**: Left-aligned, height 48-56px (desktop), 40px (mobile), vertical center alignment with 16px padding, maintain aspect ratio\n- Sticky header with subtle shadow on scroll\n- Horizontal navigation menu with smooth green hover underlines\n- Mobile: Hamburger menu with slide-in overlay\n- White background with Nigerian flag icon integrated subtly\n\n### Hero Section\nFull-width auto-rotating 4-slide carousel (5-second intervals):\n- High-energy action shots of rope skipping athletes in competition\n- Dark overlay (40% opacity) over images\n- Centered white headlines with green CTA buttons\n- Smooth fade transitions\n- Navigation dots and prev/next arrows in white\n- CTA buttons: Blurred background (backdrop-filter: blur(8px)) with green tint\n\n**Slide Content**:\n1. \"Welcome to Nigeria Rope Skipping Association – Empowering Athletes Nationwide\"\n2. \"National Rope Skipping Championship – Where Champions Rise\"\n3. \"Celebrating Nigeria's Rope Skipping Athletes\"\n4. \"Join NRSA Today – Be Part of the Fastest-Growing Sport in Nigeria\"\n\n### Buttons\n- Rounded corners (8px border-radius)\n- Bold text (font-weight: 600)\n- Primary: Green background (#009739), white text\n- Hover: Scale 1.05 with deeper green shadow\n- Over images: Blurred background with green tint, no hover/active states\n- Padding: py-3 px-8\n\n### Cards\n**Event/News Cards**: \n- White background, subtle shadow\n- Green top border accent (3px)\n- Hover: Lift effect (translateY -4px, increased shadow)\n- \"Learn More\" button at bottom\n- Date badge in green circle\n\n**Player Profile Cards**: \n- Photo at top, name, club, state, points\n- Gradient background on hover\n\n**Club Cards**: \n- Logo/icon, club name, city, manager, contact button\n\n### Expandable Content\n**\"Learn More\" Functionality**:\n- Clicking \"Learn More\" on news/events opens modal overlay OR navigates to detail page\n- Modal: Full-screen on mobile, centered card (max-w-4xl) on desktop\n- Detail View: Full article/event content with images, metadata, and related items\n- Smooth transition animations (fade-in 0.3s)\n- Close button (X) in top-right corner\n- Backdrop blur effect on modal overlay\n\n### Sections\n**Section Headers**: Green/white gradient banners, white text, centered, py-16\n\n**About Preview**: Two-column layout (text left, image right), green \"Learn More\" button opens full About page\n\n**Upcoming Events**: Card grid with prominent date badges, \"View Details\" expands to full event info\n\n**Latest News**: Featured article layout (1 large + 2 small), each with \"Read Full Article\" button\n\n**Partner Logos**: Grayscale logos with color on hover, 4-6 per row\n\n### Footer\n- Black background (#000000), white text\n- Nigerian flag icon integrated\n- Four columns: About, Quick Links, Contact Info, Social Media\n- Social icons in white with green hover state\n- Copyright bar with NRSA registration details\n\n### Forms\n- Floating labels with green accent\n- Light gray borders (default), green on focus\n- Rounded corners (8px)\n- Validation messages: green (success), red (error)\n- Submit button: Full-width (mobile), auto-width (desktop)\n\n### Admin Dashboard\n- Sidebar navigation with sections: Dashboard, News, Events, Clubs, Players, Media\n- Topbar: \"Welcome Admin\" greeting, Logout button\n- Data tables: Striped rows, green headers, responsive horizontal scroll\n- Modal forms for Add/Edit with green primary buttons\n- Toast notifications for success/error states\n\n## Images\n\n**Hero Carousel (4 slides)**: High-energy rope skipping action shots - competitions, training, championships, team celebrations. Full-width, 1920x1080+, dynamic composition showing movement.\n\n**About Section**: Federation leadership or Y-Court setup with three teams in action\n\n**Event Cards**: Competition photos, venue shots, event graphics\n\n**Player Profiles**: Professional headshots or action shots, consistent cropping\n\n**News Articles**: Event photos, championship highlights, athlete features\n\n**Partner Logos**: Federation partners, sponsors, IJRU\n\n**Background Watermarks**: NRSA logo at 10-15% opacity on section dividers\n\n## Animations\n- Page Load: Fade-in sections on scroll (0.3s)\n- Buttons: Ripple effect on click, scale on hover\n- Cards: Lift on hover (shadow increase + translateY)\n- Slider: Smooth fade transitions (1s) with crossfade\n- Navigation: Smooth scroll, green underline slide-in\n- Gallery: Zoom on hover with overlay fade-in\n- Modals: Fade-in with backdrop blur\n\n## Responsive Breakpoints\n- Mobile: < 768px (single column, hamburger menu, stacked)\n- Tablet: 768px - 1024px (2-column grids)\n- Desktop: > 1024px (full multi-column layouts)","size_bytes":6701},"client/src/pages/admin/Contacts.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Contact } from \"@shared/schema\";\n\nexport default function AdminContacts() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // ✅ Fetch all contact messages\n  const { data: contacts = [], isLoading } = useQuery<Contact[]>({\n    queryKey: [\"/api/contacts\"],\n  });\n\n  // ✅ Delete a contact message\n  const deleteContact = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/contacts/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message deleted\",\n        description: \"The contact message has been removed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete message.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Contact Messages</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          View and manage messages sent through the contact form\n        </p>\n      </div>\n\n      {/* Loading and empty states */}\n      {isLoading ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">Loading messages...</p>\n          </CardContent>\n        </Card>\n      ) : contacts.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">No contact messages yet.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <Table>\n            <TableHeader className=\"bg-primary/10\">\n              <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Subject</TableHead>\n                <TableHead>Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {contacts.map((contact) => (\n                <TableRow key={contact.id}>\n                  <TableCell>{contact.name}</TableCell>\n                  <TableCell>{contact.email}</TableCell>\n                  <TableCell>{contact.subject}</TableCell>\n                  <TableCell>\n                    {new Date(contact.createdAt).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      variant=\"outline\"\n                      className=\"text-green-600 border-green-400\"\n                    >\n                      Received\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"icon\"\n                      onClick={() => deleteContact.mutate(contact.id)}\n                      disabled={deleteContact.isPending}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":3838},"client/src/pages/admin/Affiliations.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Trash, Edit } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ImageUpload } from \"@/components/admin/ImageUpload\";\nimport type { Affiliation } from \"@shared/schema\";\n\n/**\n * Affiliations Admin Page\n * \n * CRITICAL FIX: Connected to actual API endpoints\n * Affiliations are now saved to the database and appear on the live site\n */\nexport default function AdminAffiliations() {\n  const queryClient = useQueryClient();\n  \n  const { data: affiliations = [] } = useQuery<Affiliation[]>({\n    queryKey: [\"/api/affiliations\"],\n  });\n\n  const [open, setOpen] = useState(false);\n  const [editingAffiliation, setEditingAffiliation] = useState<Affiliation | null>(null);\n  const [form, setForm] = useState({\n    name: \"\",\n    logoUrl: \"\",\n    website: \"\",\n    description: \"\",\n    order: 0,\n  });\n\n  const saveAffiliation = useMutation({\n    mutationFn: async () => {\n      const method = editingAffiliation ? \"PATCH\" : \"POST\";\n      const url = editingAffiliation ? `/api/affiliations/${editingAffiliation.id}` : \"/api/affiliations\";\n      await apiRequest(method, url, form);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/affiliations\"] });\n      setOpen(false);\n      setEditingAffiliation(null);\n      setForm({ name: \"\", logoUrl: \"\", website: \"\", description: \"\", order: 0 });\n    },\n  });\n\n  const deleteAffiliation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/affiliations/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/affiliations\"] });\n    },\n  });\n\n  const handleSave = () => {\n    if (!form.name || !form.logoUrl) {\n      alert(\"Name and logo are required!\");\n      return;\n    }\n    saveAffiliation.mutate();\n  };\n\n  const handleEdit = (affiliation: Affiliation) => {\n    setEditingAffiliation(affiliation);\n    setForm({\n      name: affiliation.name,\n      logoUrl: affiliation.logoUrl,\n      website: affiliation.website || \"\",\n      description: affiliation.description || \"\",\n      order: affiliation.order,\n    });\n    setOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (window.confirm(\"Are you sure you want to delete this affiliation?\")) {\n      deleteAffiliation.mutate(id);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Affiliations Management</h1>\n          <p className=\"text-muted-foreground mt-2\">Manage international affiliations</p>\n        </div>\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"bg-primary hover:bg-primary/90\" \n              data-testid=\"button-add-affiliation\"\n              onClick={() => {\n                setEditingAffiliation(null);\n                setForm({ name: \"\", logoUrl: \"\", website: \"\", description: \"\", order: 0 });\n              }}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Affiliation\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editingAffiliation ? \"Edit Affiliation\" : \"Add Affiliation\"}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 mt-4\">\n              <div>\n                <Label>Organization Name *</Label>\n                <Input \n                  placeholder=\"IJRU, IRSO, etc.\" \n                  data-testid=\"input-name\"\n                  value={form.name}\n                  onChange={(e) => setForm({ ...form, name: e.target.value })}\n                />\n              </div>\n              <ImageUpload\n                label=\"Organization Logo *\"\n                value={form.logoUrl}\n                onChange={(url) => setForm({ ...form, logoUrl: url })}\n              />\n              <div>\n                <Label>Website</Label>\n                <Input \n                  placeholder=\"https://ijru.sport\" \n                  data-testid=\"input-website\"\n                  value={form.website}\n                  onChange={(e) => setForm({ ...form, website: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label>Description</Label>\n                <Textarea \n                  placeholder=\"Brief description...\" \n                  className=\"min-h-[100px]\" \n                  data-testid=\"input-description\"\n                  value={form.description}\n                  onChange={(e) => setForm({ ...form, description: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label>Display Order</Label>\n                <Input \n                  type=\"number\" \n                  placeholder=\"0\" \n                  data-testid=\"input-order\"\n                  value={form.order}\n                  onChange={(e) => setForm({ ...form, order: Number(e.target.value) })}\n                />\n              </div>\n              <Button \n                className=\"w-full bg-primary hover:bg-primary/90\" \n                data-testid=\"button-save-affiliation\"\n                onClick={handleSave}\n                disabled={saveAffiliation.isPending}\n              >\n                {saveAffiliation.isPending ? \"Saving...\" : editingAffiliation ? \"Update Affiliation\" : \"Save Affiliation\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {affiliations.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">No affiliations yet. Click \"Add Affiliation\" to create one.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {affiliations\n            .sort((a, b) => a.order - b.order)\n            .map((affiliation) => (\n              <Card key={affiliation.id} className=\"p-4\">\n                <CardContent>\n                  <img \n                    src={affiliation.logoUrl} \n                    alt={affiliation.name}\n                    className=\"w-full h-32 object-contain mb-4\"\n                  />\n                  <h3 className=\"font-bold text-lg\">{affiliation.name}</h3>\n                  {affiliation.website && (\n                    <a href={affiliation.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-sm text-blue-600 hover:underline\">\n                      {affiliation.website}\n                    </a>\n                  )}\n                  {affiliation.description && (\n                    <p className=\"text-sm text-muted-foreground mt-2\">{affiliation.description}</p>\n                  )}\n                  <div className=\"flex gap-2 mt-4\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => handleEdit(affiliation)}>\n                      <Edit className=\"w-4 h-4 mr-1\" /> Edit\n                    </Button>\n                    <Button variant=\"destructive\" size=\"sm\" onClick={() => handleDelete(affiliation.id)}>\n                      <Trash className=\"w-4 h-4 mr-1\" /> Delete\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7858},"client/src/components/HeroCarousel.tsx":{"content":"import { useState, useEffect } from \"react\";\n\n// Import all 11 competition photos\nimport photo1 from \"@assets/photo_2025-10-24_14-56-46_1761314282906.jpg\";\nimport photo2 from \"@assets/photo_2025-10-24_14-56-57_1761314282907.jpg\";\nimport photo3 from \"@assets/photo_2025-10-24_14-57-02_1761314282907.jpg\";\nimport photo4 from \"@assets/photo_2025-10-24_14-57-06_1761314282908.jpg\";\nimport photo5 from \"@assets/photo_2025-10-24_14-57-11_1761314282909.jpg\";\nimport photo6 from \"@assets/photo_2025-10-24_14-57-15_1761314282910.jpg\";\nimport photo7 from \"@assets/photo_2025-10-24_14-57-19_1761314282910.jpg\";\nimport photo8 from \"@assets/photo_2025-10-24_14-57-25_1761314282902.jpg\";\nimport photo9 from \"@assets/photo_2025-10-24_14-57-29_1761314282903.jpg\";\nimport photo10 from \"@assets/photo_2025-10-24_14-57-33_1761314282904.jpg\";\nimport photo11 from \"@assets/photo_2025-10-24_14-57-38_1761314282905.jpg\";\n\nconst defaultSlides = [\n  { imageUrl: photo1, headline: \"Welcome to Nigeria Rope Skipping Association\", subheadline: \"Official Governing Body for Rope Skipping in Nigeria\" },\n  { imageUrl: photo2, headline: \"Join NRSA Today\", subheadline: \"Be Part of Nigeria's Fastest-Growing Sport\" },\n  { imageUrl: photo3, headline: \"National Rope Skipping Championships\", subheadline: \"Where Champions Are Made\" },\n  { imageUrl: photo4, headline: \"Excellence in Rope Skipping\", subheadline: \"Training the Next Generation\" },\n  { imageUrl: photo5, headline: \"Affiliated with IJRU & IRSO\", subheadline: \"International Standards, Nigerian Excellence\" },\n  { imageUrl: photo6, headline: \"Competitive Excellence\", subheadline: \"Showcasing Nigeria's Best Athletes\" },\n  { imageUrl: photo7, headline: \"Building Champions\", subheadline: \"From Grassroots to Glory\" },\n  { imageUrl: photo8, headline: \"Team Nigeria\", subheadline: \"United in Sport, United in Purpose\" },\n  { imageUrl: photo9, headline: \"Athletic Achievement\", subheadline: \"Setting New Standards in Rope Skipping\" },\n  { imageUrl: photo10, headline: \"Youth Development\", subheadline: \"Inspiring the Next Generation of Champions\" },\n  { imageUrl: photo11, headline: \"National Pride\", subheadline: \"Representing Nigeria on the Global Stage\" },\n];\n\nexport function HeroCarousel() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const slides = defaultSlides;\n\n  // Auto-slide every 5 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentSlide((prev) => (prev + 1) % slides.length);\n    }, 5000);\n\n    return () => clearInterval(interval); // cleanup\n  }, [slides.length]);\n\n  return (\n    <div className=\"relative w-full h-[500px] md:h-[600px] overflow-hidden\">\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 transition-opacity duration-1000 ${\n            index === currentSlide ? \"opacity-100 z-10\" : \"opacity-0 z-0\"\n          }`}\n        >\n          <div className=\"relative w-full h-full\">\n            <img src={slide.imageUrl} alt={slide.headline} className=\"w-full h-full object-cover\" />\n            <div className=\"absolute inset-0 bg-black/40\" />\n          </div>\n          <div className=\"absolute inset-0 flex items-center justify-center z-20\">\n            <div className=\"max-w-4xl mx-auto px-6 text-center\">\n              <h1 className=\"text-white font-bold text-4xl md:text-6xl mb-4 drop-shadow-lg\">{slide.headline}</h1>\n              {slide.subheadline && (\n                <p className=\"text-white text-lg md:text-2xl drop-shadow-lg\">{slide.subheadline}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3616},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/admin/Dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Calendar, Trophy, Image, Mail, Newspaper } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { News, Event, Player, Club, Media, Contact } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { data: news = [] } = useQuery<News[]>({ queryKey: [\"/api/news\"] });\n  const { data: events = [] } = useQuery<Event[]>({ queryKey: [\"/api/events\"] });\n  const { data: players = [] } = useQuery<Player[]>({ queryKey: [\"/api/players\"] });\n  const { data: clubs = [] } = useQuery<Club[]>({ queryKey: [\"/api/clubs\"] });\n  const { data: mediaItems = [] } = useQuery<Media[]>({ queryKey: [\"/api/media\"] });\n  const { data: contacts = [] } = useQuery<Contact[]>({ queryKey: [\"/api/contacts\"] });\n\n  const stats = [\n    { label: \"Total News Articles\", value: news.length.toString(), icon: Newspaper, color: \"text-blue-600\" },\n    { label: \"Upcoming Events\", value: events.length.toString(), icon: Calendar, color: \"text-green-600\" },\n    { label: \"Registered Players\", value: players.length.toString(), icon: Users, color: \"text-purple-600\" },\n    { label: \"Active Clubs\", value: clubs.length.toString(), icon: Trophy, color: \"text-orange-600\" },\n    { label: \"Media Items\", value: mediaItems.length.toString(), icon: Image, color: \"text-pink-600\" },\n    { label: \"Contact Messages\", value: contacts.length.toString(), icon: Mail, color: \"text-red-600\" },\n  ];\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Dashboard Overview</h1>\n        <p className=\"text-muted-foreground mt-2\">Welcome to NRSA Admin Portal</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {stats.map((stat) => (\n          <Card key={stat.label}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {stat.label}\n              </CardTitle>\n              <stat.icon className={`w-5 h-5 ${stat.color}`} />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold\">{stat.value}</div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground text-sm\">No recent activity to display.</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <p className=\"text-sm text-muted-foreground\">\n              Use the sidebar navigation to manage website content.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3044},"server/db.ts":{"content":"// --- REWRITE YOUR ENTIRE DB CONNECTION FILE ---\n\n// 1. Import the correct Drizzle driver\nimport { drizzle } from \"drizzle-orm/node-postgres\";\n\n// 2. Use the original pg package (for the connection pool)\nimport pkg from \"pg\";\nimport * as schema from \"@shared/schema\"; \n\n// Destructure Pool correctly for ES Modules\nconst { Pool } = pkg;\n\n// Remove all neonConfig and ws imports/setup lines\n\nif (!process.env.DATABASE_URL) throw new Error(\"DATABASE_URL must be set\");\n\n// 3. Create the standard PostgreSQL Pool using the DATABASE_URL\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\n// 4. Initialize Drizzle with the Pool\nexport const db = drizzle(pool, { schema });\n\n// --- END REWRITE ---","size_bytes":720},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/pages/News.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { News } from \"@shared/schema\";\n\nexport default function News() {\n  const { data: newsItems = [], isLoading } = useQuery<News[]>({\n    queryKey: [\"/api/news\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Latest News</h1>\n          <p className=\"text-xl md:text-2xl opacity-90 max-w-3xl\">\n            Stay updated with the latest news, achievements, and developments from the Nigeria Rope Skipping community.\n          </p>\n        </div>\n      </section>\n\n      {/* News Grid */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          {isLoading ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">Loading news...</p>\n            </div>\n          ) : newsItems.length === 0 ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">No news articles available at the moment.</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {newsItems.map((item) => (\n              <Card \n                key={item.id} \n                className=\"hover-elevate active-elevate-2 cursor-pointer transition-all border-t-4 border-t-primary h-full flex flex-col\"\n                data-testid={`card-news-${item.id}`}\n              >\n                {item.imageUrl && (\n                  <div className=\"w-full h-48 bg-muted overflow-hidden\">\n                    <img \n                      src={item.imageUrl} \n                      alt={item.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                )}\n                <CardHeader className=\"flex-grow\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    {item.isFeatured && (\n                      <Badge className=\"bg-destructive text-destructive-foreground\">Featured</Badge>\n                    )}\n                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                      <Calendar className=\"w-3 h-3\" />\n                      <span>{format(new Date(item.publishedAt), \"MMM dd, yyyy\")}</span>\n                    </div>\n                  </div>\n                  <CardTitle className=\"text-xl leading-tight\">{item.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground line-clamp-3\">{item.excerpt}</p>\n                </CardContent>\n              </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":3162},"server/auth.ts":{"content":"import { Express } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev-secret-change-in-production\";\n\n/**\n * Authentication Routes\n * \n * Handles admin login using JWT tokens.\n * Note: Admin account is automatically created on server startup (see server/index.ts)\n * \n * Security:\n * - JWT tokens expire after 8 hours\n * - Passwords are hashed with bcrypt (10 rounds)\n * - Invalid login attempts return generic error message to prevent username enumeration\n */\nexport function registerAuthRoutes(app: Express) {\n  /**\n   * Admin Login Endpoint\n   * POST /api/admin/login\n   * \n   * Request body: { email: string, password: string }\n   * Response: { token: string, admin: { id, name, email } }\n   * \n   * Returns 401 for invalid credentials (generic error to prevent enumeration)\n   */\n  app.post(\"/api/admin/login\", async (req, res) => {\n    const { email, password } = req.body;\n    \n    // Find admin by email\n    const admin = await storage.getAdminByEmail(email);\n    if (!admin) return res.status(401).json({ error: \"Invalid credentials\" });\n\n    // Verify password hash\n    const match = await bcrypt.compare(password, admin.passwordHash);\n    if (!match) return res.status(401).json({ error: \"Invalid credentials\" });\n\n    // Generate JWT token valid for 8 hours\n    const token = jwt.sign({ adminId: admin.id }, JWT_SECRET, { expiresIn: \"8h\" });\n    \n    // Return token and admin info (excluding password hash)\n    res.json({ token, admin: { id: admin.id, name: admin.name, email: admin.email } });\n  });\n}","size_bytes":1628},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/pages/admin/HeroSlides.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Edit, Trash, MoveUp, MoveDown } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { ImageUpload } from \"@/components/admin/ImageUpload\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { HeroSlide } from \"@shared/schema\";\n\n/**\n * Hero Slides Admin Page\n * \n * Manages homepage hero carousel slides with drag-and-drop image upload.\n * \n * Features:\n * - Create, edit, delete hero slides\n * - Drag-and-drop image upload (replaces URL-only input)\n * - Reorder slides by changing order number\n * - Toggle slide active/inactive status\n * - All changes update live site immediately\n */\nexport default function AdminHeroSlides() {\n  const queryClient = useQueryClient();\n  const { data: slides = [] } = useQuery<HeroSlide[]>({\n    queryKey: [\"/api/hero-slides\"],\n  });\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editSlide, setEditSlide] = useState<HeroSlide | null>(null);\n  const [formData, setFormData] = useState({\n    imageUrl: \"\",\n    headline: \"\",\n    subheadline: \"\",\n    ctaText: \"\",\n    ctaLink: \"\",\n    order: 0,\n    isActive: true,\n  });\n\n  // Create or update mutation\n  const saveMutation = useMutation({\n    mutationFn: async () => {\n      const method = editSlide ? \"PATCH\" : \"POST\";\n      const url = editSlide ? `/api/hero-slides/${editSlide.id}` : \"/api/hero-slides\";\n      return await apiRequest(method, url, formData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hero-slides\"] });\n      setDialogOpen(false);\n      resetForm();\n    },\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/hero-slides/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hero-slides\"] });\n    },\n  });\n\n  const handleSave = () => {\n    if (!formData.imageUrl || !formData.headline) {\n      alert(\"Please provide an image and headline\");\n      return;\n    }\n    saveMutation.mutate();\n  };\n\n  const handleEdit = (slide: HeroSlide) => {\n    setEditSlide(slide);\n    setFormData({\n      imageUrl: slide.imageUrl,\n      headline: slide.headline,\n      subheadline: slide.subheadline || \"\",\n      ctaText: slide.ctaText || \"\",\n      ctaLink: slide.ctaLink || \"\",\n      order: slide.order,\n      isActive: slide.isActive,\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Delete this slide?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const resetForm = () => {\n    setEditSlide(null);\n    setFormData({\n      imageUrl: \"\",\n      headline: \"\",\n      subheadline: \"\",\n      ctaText: \"\",\n      ctaLink: \"\",\n      order: slides.length,\n      isActive: true,\n    });\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Hero Slides</h1>\n          <p className=\"text-muted-foreground mt-2\">Manage homepage hero carousel slides</p>\n        </div>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-slide\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Slide\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editSlide ? \"Edit\" : \"Add\"} Hero Slide</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 mt-4\">\n              {/* NEW: Drag-and-drop image upload component */}\n              <ImageUpload\n                value={formData.imageUrl}\n                onChange={(url) => setFormData({ ...formData, imageUrl: url })}\n                label=\"Hero Image *\"\n              />\n              \n              <div>\n                <Label>Headline *</Label>\n                <Input \n                  value={formData.headline}\n                  onChange={(e) => setFormData({ ...formData, headline: e.target.value })}\n                  placeholder=\"Main headline text\" \n                  data-testid=\"input-headline\" \n                />\n              </div>\n              <div>\n                <Label>Subheadline</Label>\n                <Input \n                  value={formData.subheadline}\n                  onChange={(e) => setFormData({ ...formData, subheadline: e.target.value })}\n                  placeholder=\"Supporting text (optional)\" \n                  data-testid=\"input-subheadline\" \n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>CTA Button Text</Label>\n                  <Input \n                    value={formData.ctaText}\n                    onChange={(e) => setFormData({ ...formData, ctaText: e.target.value })}\n                    placeholder=\"Learn More\" \n                    data-testid=\"input-cta-text\" \n                  />\n                </div>\n                <div>\n                  <Label>CTA Link</Label>\n                  <Input \n                    value={formData.ctaLink}\n                    onChange={(e) => setFormData({ ...formData, ctaLink: e.target.value })}\n                    placeholder=\"/about\" \n                    data-testid=\"input-cta-link\" \n                  />\n                </div>\n              </div>\n              <div>\n                <Label>Display Order</Label>\n                <Input \n                  type=\"number\"\n                  value={formData.order}\n                  onChange={(e) => setFormData({ ...formData, order: parseInt(e.target.value) || 0 })}\n                  placeholder=\"0\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Switch \n                  checked={formData.isActive}\n                  onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  data-testid=\"switch-active\" \n                />\n                <Label>Active</Label>\n              </div>\n              <Button \n                onClick={handleSave}\n                disabled={saveMutation.isPending}\n                className=\"w-full bg-primary hover:bg-primary/90\" \n                data-testid=\"button-save-slide\"\n              >\n                {saveMutation.isPending ? \"Saving...\" : \"Save Slide\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {slides.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">No hero slides created yet. Click \"Add Slide\" to create one.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {slides.map((slide) => (\n            <Card key={slide.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex gap-4\">\n                  <img \n                    src={slide.imageUrl} \n                    alt={slide.headline}\n                    className=\"w-32 h-20 object-cover rounded\"\n                  />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">{slide.headline}</h3>\n                    {slide.subheadline && (\n                      <p className=\"text-sm text-muted-foreground\">{slide.subheadline}</p>\n                    )}\n                    <div className=\"flex gap-2 mt-2\">\n                      <span className=\"text-xs px-2 py-1 rounded bg-gray-100\">\n                        Order: {slide.order}\n                      </span>\n                      <span className={`text-xs px-2 py-1 rounded ${slide.isActive ? 'bg-green-100 text-green-700' : 'bg-gray-100'}`}>\n                        {slide.isActive ? 'Active' : 'Inactive'}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"icon\"\n                      onClick={() => handleEdit(slide)}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant=\"destructive\" \n                      size=\"icon\"\n                      onClick={() => handleDelete(slide.id)}\n                    >\n                      <Trash className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":9157},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/admin/Clubs.tsx":{"content":"// src/pages/admin/AdminClubs.tsx\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, Trash2, Edit3 } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport type { Club, InsertClub } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ImageUpload } from \"@/components/admin/ImageUpload\";\n\n/**\n * AdminClubs — Admin UI for Clubs with Add / Edit / Delete\n *\n * Notes:\n * - Uses /api/clubs (GET, POST, PUT, DELETE)\n * - Non-destructive: keeps existing structure/styling\n * - Uses React Query to invalidate and refresh the clubs list after changes\n */\n\nexport default function AdminClubs() {\n  const queryClient = useQueryClient();\n\n  // Fetch clubs\n  const { data: clubs = [], isLoading } = useQuery<Club[]>({\n    queryKey: [\"/api/clubs\"],\n  });\n\n  // --- Add Club mutation ---\n  const addClub = useMutation({\n    mutationFn: async (newClub: InsertClub) => {\n      const res = await apiRequest(\"POST\", \"/api/clubs\", newClub);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clubs\"] });\n    },\n  });\n\n  // --- Update Club mutation (Edit) ---\n  const updateClub = useMutation({\n    mutationFn: async (payload: { id: string; data: Partial<Club> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/clubs/${payload.id}`, payload.data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clubs\"] });\n    },\n  });\n\n  // --- Delete Club mutation ---\n  const deleteClub = useMutation({\n    mutationFn: async (id: string | number) => {\n      const res = await apiRequest(\"DELETE\", `/api/clubs/${id}`);\n      return res.status === 204 ? null : res.json();\n    },\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: [\"/api/clubs\"] }),\n  });\n\n  // Form state for Add\n  const [form, setForm] = useState({\n    name: \"\",\n    logoUrl: \"\",\n    city: \"\",\n    state: \"\",\n    managerName: \"\",\n    contactEmail: \"\",\n    contactPhone: \"\",\n    isRegistered: true,\n  });\n\n  // Edit state: which club is being edited and its form\n  const [editingClubId, setEditingClubId] = useState<string | null>(null);\n  const [editForm, setEditForm] = useState<typeof form | null>(null);\n  const [editOpen, setEditOpen] = useState(false);\n\n  const handleChange = (key: keyof typeof form, value: string | boolean) => {\n    setForm((p) => ({ ...p, [key]: value }));\n  };\n\n  const handleSubmitAdd = () => {\n    if (!form.name || !form.city || !form.state || !form.managerName || !form.contactEmail || !form.contactPhone) {\n      alert(\"Please fill all required fields.\");\n      return;\n    }\n    addClub.mutate(form);\n    // clear form on success (best-effort)\n    setForm({\n      name: \"\",\n      logoUrl: \"\",\n      city: \"\",\n      state: \"\",\n      managerName: \"\",\n      contactEmail: \"\",\n      contactPhone: \"\",\n      isRegistered: true,\n    });\n  };\n\n  // Begin Edit for a club\n  const startEdit = (club: Club) => {\n    setEditingClubId(String((club as any).id));\n    setEditForm({\n      name: club.name ?? \"\",\n      logoUrl: (club as any).logoUrl ?? (club as any).logo ?? \"\",\n      city: club.city ?? \"\",\n      state: club.state ?? \"\",\n      managerName: club.managerName ?? \"\",\n      contactEmail: club.contactEmail ?? \"\",\n      contactPhone: club.contactPhone ?? \"\",\n      isRegistered: Boolean((club as any).isRegistered),\n    });\n    setEditOpen(true);\n  };\n\n  const handleEditChange = (key: keyof typeof form, value: string | boolean) => {\n    if (!editForm) return;\n    setEditForm({ ...editForm, [key]: value });\n  };\n\n  const handleSubmitEdit = () => {\n    if (!editingClubId || !editForm) return;\n    // Basic validation\n    if (!editForm.name || !editForm.city || !editForm.state || !editForm.managerName || !editForm.contactEmail || !editForm.contactPhone) {\n      alert(\"Please fill all required fields.\");\n      return;\n    }\n    updateClub.mutate({ id: editingClubId, data: editForm });\n    setEditOpen(false);\n    setEditingClubId(null);\n    setEditForm(null);\n  };\n\n  return (\n    <div>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Clubs Management</h1>\n          <p className=\"text-muted-foreground mt-2\">Manage registered clubs</p>\n        </div>\n\n        {/* Add Club Dialog */}\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-club\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Club\n            </Button>\n          </DialogTrigger>\n\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Add Club</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-4 mt-4\">\n              <div>\n                <Label>Club Name *</Label>\n                <Input value={form.name} onChange={(e) => handleChange(\"name\", e.target.value)} />\n              </div>\n\n              <ImageUpload\n                label=\"Club Logo\"\n                value={form.logoUrl}\n                onChange={(url) => handleChange(\"logoUrl\", url)}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>City *</Label>\n                  <Input value={form.city} onChange={(e) => handleChange(\"city\", e.target.value)} />\n                </div>\n                <div>\n                  <Label>State *</Label>\n                  <Input value={form.state} onChange={(e) => handleChange(\"state\", e.target.value)} />\n                </div>\n              </div>\n\n              <div>\n                <Label>Manager Name *</Label>\n                <Input value={form.managerName} onChange={(e) => handleChange(\"managerName\", e.target.value)} />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Contact Email *</Label>\n                  <Input value={form.contactEmail} onChange={(e) => handleChange(\"contactEmail\", e.target.value)} />\n                </div>\n                <div>\n                  <Label>Contact Phone *</Label>\n                  <Input value={form.contactPhone} onChange={(e) => handleChange(\"contactPhone\", e.target.value)} />\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Switch checked={form.isRegistered} onCheckedChange={(v) => handleChange(\"isRegistered\", v)} />\n                <Label>Registered</Label>\n              </div>\n\n              <Button onClick={handleSubmitAdd} className=\"w-full bg-primary hover:bg-primary/90\" disabled={addClub.isPending}>\n                {addClub.isPending ? \"Saving...\" : \"Save Club\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Clubs List */}\n      {isLoading ? (\n        <div className=\"text-center py-20\">Loading clubs...</div>\n      ) : clubs.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">No clubs registered yet. Click \"Add Club\" to register one.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {clubs.map((club) => (\n            <Card key={(club as any).id} className=\"p-6 relative\">\n              {/* Edit & Delete buttons */}\n              <div className=\"absolute top-4 right-4 flex gap-2\">\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => startEdit(club)}\n                  disabled={updateClub.isPending}\n                  aria-label={`Edit ${club.name}`}\n                >\n                  <Edit3 className=\"w-4 h-4\" />\n                </Button>\n\n                <Button\n                  variant=\"destructive\"\n                  size=\"icon\"\n                  onClick={() => {\n                    // confirm before deleting\n                    if (confirm(`Delete club \"${club.name}\"? This cannot be undone.`)) {\n                      deleteClub.mutate((club as any).id);\n                    }\n                  }}\n                  disabled={deleteClub.isPending}\n                  aria-label={`Delete ${club.name}`}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n\n              <CardContent>\n                <h3 className=\"font-bold text-xl mb-2\">{club.name}</h3>\n                <p className=\"text-sm text-muted-foreground mb-1\">{club.city}, {club.state}</p>\n                <p className=\"text-sm mb-2\">{club.managerName}</p>\n                <p className=\"text-sm text-muted-foreground mb-1\">{club.contactEmail}</p>\n                <p className=\"text-sm text-muted-foreground\">{club.contactPhone}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Edit Modal (controlled) */}\n      <Dialog open={editOpen} onOpenChange={(v) => setEditOpen(v)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Club</DialogTitle>\n          </DialogHeader>\n\n          {editForm ? (\n            <div className=\"space-y-4 mt-4\">\n              <div>\n                <Label>Club Name *</Label>\n                <Input value={editForm.name} onChange={(e) => handleEditChange(\"name\", e.target.value)} />\n              </div>\n\n              <ImageUpload\n                label=\"Club Logo\"\n                value={editForm.logoUrl}\n                onChange={(url) => handleEditChange(\"logoUrl\", url)}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>City *</Label>\n                  <Input value={editForm.city} onChange={(e) => handleEditChange(\"city\", e.target.value)} />\n                </div>\n                <div>\n                  <Label>State *</Label>\n                  <Input value={editForm.state} onChange={(e) => handleEditChange(\"state\", e.target.value)} />\n                </div>\n              </div>\n\n              <div>\n                <Label>Manager Name *</Label>\n                <Input value={editForm.managerName} onChange={(e) => handleEditChange(\"managerName\", e.target.value)} />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Contact Email *</Label>\n                  <Input value={editForm.contactEmail} onChange={(e) => handleEditChange(\"contactEmail\", e.target.value)} />\n                </div>\n                <div>\n                  <Label>Contact Phone *</Label>\n                  <Input value={editForm.contactPhone} onChange={(e) => handleEditChange(\"contactPhone\", e.target.value)} />\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Switch checked={editForm.isRegistered} onCheckedChange={(v) => handleEditChange(\"isRegistered\", v)} />\n                <Label>Registered</Label>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button onClick={() => { setEditOpen(false); setEditingClubId(null); setEditForm(null); }} variant=\"ghost\">Cancel</Button>\n                <Button onClick={handleSubmitEdit} disabled={updateClub.isPending} className=\"bg-primary hover:bg-primary/90\">\n                  {updateClub.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"py-10 text-center\">Loading...</div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":12107},"client/src/pages/admin/Media.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Trash, Edit2 } from \"lucide-react\";\nimport { ImageUpload } from \"@/components/admin/ImageUpload\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { Media } from \"@shared/schema\";\nimport axios from \"axios\";\n\nexport default function AdminMedia() {\n  const queryClient = useQueryClient();\n  const { data: mediaItems = [] } = useQuery<Media[]>({\n    queryKey: [\"/api/media\"],\n  });\n\n  const [editingMedia, setEditingMedia] = useState<Media | null>(null);\n  const [form, setForm] = useState({ title: \"\", description: \"\", imageUrl: \"\", category: \"\" });\n\n  // Add / Edit mutation\n  const saveMedia = useMutation({\n    mutationFn: async (media: Media) => {\n      if (editingMedia) {\n        await axios.put(`/api/media/${editingMedia.id}`, media);\n      } else {\n        await axios.post(\"/api/media\", media);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/media\"] });\n      setEditingMedia(null);\n      setForm({ title: \"\", description: \"\", imageUrl: \"\", category: \"\" });\n    },\n  });\n\n  // Delete mutation\n  const deleteMedia = useMutation({\n    mutationFn: async (id: number) => await axios.delete(`/api/media/${id}`),\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: [\"/api/media\"] }),\n  });\n\n  const handleSubmit = () => {\n    if (!form.title || !form.imageUrl || !form.category) return alert(\"All required fields must be filled!\");\n    saveMedia.mutate(form as Media);\n  };\n\n  const handleEdit = (item: Media) => {\n    setEditingMedia(item);\n    setForm({\n      title: item.title,\n      description: item.description || \"\",\n      imageUrl: item.imageUrl,\n      category: item.category,\n    });\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Media Management</h1>\n          <p className=\"text-muted-foreground mt-2\">Add, edit, or delete gallery images</p>\n        </div>\n\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button className=\"bg-primary hover:bg-primary/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              {editingMedia ? \"Edit Media\" : \"Add Media\"}\n            </Button>\n          </DialogTrigger>\n\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingMedia ? \"Edit Media\" : \"Add Media\"}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 mt-4\">\n              <div>\n                <Label>Title *</Label>\n                <Input\n                  value={form.title}\n                  onChange={(e) => setForm({ ...form, title: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label>Description</Label>\n                <Textarea\n                  value={form.description}\n                  onChange={(e) => setForm({ ...form, description: e.target.value })}\n                />\n              </div>\n              <ImageUpload\n                label=\"Media Image *\"\n                value={form.imageUrl}\n                onChange={(url) => setForm({ ...form, imageUrl: url })}\n              />\n              <div>\n                <Label>Category *</Label>\n                <Input\n                  value={form.category}\n                  onChange={(e) => setForm({ ...form, category: e.target.value })}\n                />\n              </div>\n              <Button\n                className=\"w-full bg-primary hover:bg-primary/90\"\n                onClick={handleSubmit}\n                disabled={saveMedia.isPending}\n              >\n                {saveMedia.isPending ? \"Saving...\" : editingMedia ? \"Update Media\" : \"Save Media\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {mediaItems.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">No media items yet. Click \"Add Media\" to upload one.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {mediaItems.map((item) => (\n            <Card key={item.id} className=\"overflow-hidden p-4\">\n              <img\n                src={item.imageUrl}\n                alt={item.title}\n                className=\"w-full h-48 object-cover rounded-md\"\n              />\n              <h3 className=\"font-semibold mt-3\">{item.title}</h3>\n              <p className=\"text-sm text-muted-foreground mb-2\">{item.category}</p>\n              <div className=\"flex justify-between\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleEdit(item)}\n                >\n                  <Edit2 className=\"w-4 h-4 mr-1\" /> Edit\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => deleteMedia.mutate(item.id)}\n                >\n                  <Trash className=\"w-4 h-4 mr-1\" /> Delete\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5645},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"attached_assets/design_guidelines_1761313762585.md":{"content":"# Design Guidelines: Nigeria Rope Skipping Association (NRSA) Website\n\n## Design Approach\n\n**Selected Approach:** Reference-based, drawing inspiration from professional sports federation websites (IJRU.sport, World Rope Skipping Federation) combined with modern SaaS dashboard patterns for the admin interface.\n\n**Design Philosophy:** Create a credible, authoritative sports federation presence that balances professional gravitas with the dynamic energy of rope skipping as a competitive sport. The design must inspire confidence in stakeholders (athletes, clubs, sponsors) while remaining accessible to the general public.\n\n## Color System\nDeep blue (#003366) as primary accent with clean white backgrounds. Secondary blues for hierarchy, success greens for CTAs, and neutral grays for text.\n\n## Typography System\n\n**Font Families:**\n- Primary: Inter (via Google Fonts CDN) - for UI, body text, and admin dashboard\n- Display: Poppins (via Google Fonts CDN) - for headlines and hero text\n\n**Type Scale:**\n- Hero Headlines: text-5xl md:text-6xl lg:text-7xl, font-bold\n- Section Titles: text-3xl md:text-4xl, font-bold\n- Subsection Titles: text-2xl md:text-3xl, font-semibold\n- Card Titles: text-xl font-semibold\n- Body Text: text-base leading-relaxed\n- Small Text: text-sm\n- Admin Dashboard Headers: text-2xl font-bold\n- Admin Table Headers: text-xs font-semibold uppercase tracking-wide\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of 2, 4, 6, 8, 12, 16, and 24 (p-2, h-8, m-4, gap-6, py-12, px-16, space-y-24)\n\n**Container Strategy:**\n- Public pages: max-w-7xl mx-auto px-4 md:px-8\n- Admin dashboard: Full-width layout with fixed sidebar\n- Content sections: py-16 md:py-24 for vertical rhythm\n- Card grids: gap-6 md:gap-8\n\n## Public Website Components\n\n### 1. Navigation Header\n- Fixed top navigation with NRSA logo (left), menu links (center), \"Admin Login\" button (right)\n- Transparent over hero, solid white background on scroll\n- Mobile: Hamburger menu with slide-in drawer\n- Links: Home, News, Events, Players, Clubs, Media, Contact\n\n### 2. Hero Section (Homepage)\n- Full-width image slider showcasing rope skipping action shots\n- Overlay with semi-transparent dark gradient for text readability\n- Centered content: Large headline, supporting tagline, dual CTAs (primary + secondary)\n- Slider controls: Dots navigation (bottom) + arrow controls (sides)\n- Height: min-h-[600px] md:min-h-[700px]\n- **Images Required:** 3-5 high-quality rope skipping action photos (competitions, training, team celebrations)\n\n### 3. Mission/Vision Section\n- Two-column layout on desktop (mission left, vision right), stacked on mobile\n- Each column: Icon/graphic, heading, descriptive paragraph\n- Background: Subtle light gray or white\n- Padding: py-20\n\n### 4. Featured News Section\n- Three-column grid (grid-cols-1 md:grid-cols-2 lg:grid-cols-3)\n- Card design: Featured image (aspect-ratio-video), category badge, headline, excerpt, \"Read More\" link, date\n- Hover effect: Subtle lift and shadow increase\n- \"View All News\" button centered below\n\n### 5. News Page\n- Masonry-style grid or standard card grid\n- Filters: Category tags (All, Events, Achievements, Updates)\n- Each article card: Large featured image, title, date, excerpt, category badge\n- Pagination: 9-12 articles per page\n\n### 6. Events Page\n- Dual-view option: Grid view + Calendar view (toggle)\n- Event cards: Date badge (prominent), title, location icon + text, time, registration CTA\n- Upcoming events prominently featured, past events in separate section\n- Calendar integration displaying event dates from events.json\n\n### 7. Players Directory\n- Grid layout: grid-cols-1 md:grid-cols-2 lg:grid-cols-4\n- Player cards: Profile photo (circular or square), name, NRSF ID badge, awards/medals icons\n- Click to expand modal: Full bio, achievements list, competition history, photo gallery\n- Filter/search: By name, club, achievement level\n\n### 8. Clubs Section\n- Card grid: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n- Club cards: Logo, name, location, contact button, \"Registered\" badge\n- Hover: Scale slightly, shadow increase\n- Registration status indicator (color-coded)\n\n### 9. Media Gallery\n- Masonry grid for photos (Pinterest-style)\n- Video thumbnails with play icon overlays\n- Lightbox modal for full-screen viewing\n- Categories: Competition Photos, Training, Events, Promotional Videos\n- Upload date and description on hover\n\n### 10. Contact Page\n- Two-column: Contact form (left 60%), contact information + map (right 40%)\n- Form fields: Name, Email, Subject, Message\n- Contact info: Email (rsfederationng@gmail.com), social links, office location\n- Success/error toast notifications\n\n### 11. Leaders/Executive Board\n- Horizontal card layout for each leader\n- Photo (left), name + title + bio (right)\n- Alternating layout direction for visual interest\n- Background: Alternating white/subtle gray sections\n\n### 12. Footer\n- Three-column layout: About NRSA (left), Quick Links (center), Contact & Social (right)\n- Newsletter subscription form\n- Copyright, privacy policy links\n- Social media icons (Facebook, Twitter, Instagram, YouTube)\n\n## Admin Dashboard Components\n\n### Dashboard Layout Structure\n- **Sidebar (Fixed Left):** 280px width, full-height, deep blue background\n  - NRSA logo + \"Admin Panel\" text (top)\n  - Navigation menu: Dashboard, Site Settings, Leaders, News, Events, Players, Clubs, Media, Contact Submissions\n  - Logout button (bottom)\n  - Active state: Lighter blue background, left border accent\n\n- **Topbar:** Full-width, white background, border-bottom\n  - Breadcrumb navigation (left)\n  - Search bar (center)\n  - Admin name + avatar dropdown (right)\n\n- **Main Content Area:** Padding: p-8, background: light gray (#F9FAFB)\n\n### Dashboard Home (Overview)\n- Stats cards grid: 4 columns (Total News, Upcoming Events, Registered Players, Active Clubs)\n- Each card: Large number, icon, label, change indicator (+/-)\n- Recent activity feed (latest 5 additions/edits)\n- Quick actions: \"Add News\", \"Create Event\", \"Upload Media\"\n\n### CRUD Pages Layout (News, Events, Players, Clubs, Leaders)\n- Page header: Title, \"Add New [Item]\" button (primary CTA, right-aligned)\n- Data table: Striped rows, hover states, sortable columns\n  - Columns: Thumbnail/Image, Title/Name, Date, Status, Actions (Edit/Delete icons)\n  - Pagination controls (bottom)\n  - Search/filter inputs (top-right)\n\n### Form Modals (Add/Edit)\n- Modal overlay: Semi-transparent dark background\n- Modal content: max-w-2xl, white background, rounded corners, shadow-2xl\n- Header: Title, close button (X)\n- Form sections: Grouped fields with labels, Tailwind form styling\n- Image upload: Drag-and-drop zone + browse button + URL input option\n- Footer: Cancel (secondary) + Save (primary) buttons, aligned right\n\n### Site Settings Page\n- Tab navigation: General, Homepage, Contact, Social Media\n- Form sections with clear headings\n- Live preview option (split-view for certain settings)\n- Save button: Sticky bottom-right\n\n### Media Manager\n- Grid view with thumbnail previews\n- Upload area: Drag-and-drop (prominent), supports multiple files\n- Each media item: Thumbnail, filename, upload date, file size, delete icon\n- Filter: All, Images, Videos\n- Bulk actions: Select multiple, delete selected\n\n### Contact Submissions Page\n- Table view: Sender name, email, subject, date, status (read/unread)\n- Click row to expand: Full message, reply button\n- Mark as read/unread toggle\n- Delete option\n\n## Icons\n**Library:** Heroicons (via CDN)\n- Navigation: Home, Calendar, Users, Trophy, Image, Mail icons\n- Actions: Plus, Pencil, Trash, Eye, X icons\n- Dashboard: Chart, Bell, Settings icons\n\n## Images Strategy\n\n### Public Website Images Required:\n1. **Hero Slider (3-5 images):** Dynamic rope skipping action - competition jumps, synchronized team routines, athletes mid-air, podium celebrations\n2. **Mission/Vision Section:** Inspirational team training photo or rope skipping silhouettes\n3. **Leaders/Executive Board:** Professional headshots for each board member\n4. **News Articles:** Featured images for each article (competitions, workshops, ceremonies)\n5. **Events:** Event-specific photos (venue, past event highlights)\n6. **Players:** Individual athlete photos (action shots or portraits)\n7. **Clubs:** Club logos and group photos\n8. **Media Gallery:** Competition photos, training sessions, promotional videos\n\n### Admin Dashboard Images:\n- NRSA logo (sidebar)\n- Default avatar placeholders\n- Upload preview thumbnails\n\n## Responsive Breakpoints\n- Mobile: < 768px (single column, stacked layouts, hamburger menu)\n- Tablet: 768px - 1024px (2-column grids, condensed spacing)\n- Desktop: > 1024px (full multi-column layouts, expanded sidebar)\n\n## Animation & Interactions\n- Page transitions: Minimal, fast (200ms)\n- Hover states: Subtle scale (1.02), shadow increase, slight color shift\n- Loading states: Spinner overlays for data fetching\n- Success/error toasts: Slide in from top-right, auto-dismiss after 4 seconds\n- Modal animations: Fade in overlay, scale up content (300ms ease-out)\n- Avoid: Excessive animations, parallax scrolling, complex scroll-triggered effects\n\n## Accessibility\n- WCAG 2.1 AA compliance\n- Focus states: Visible outline on all interactive elements\n- ARIA labels for icon-only buttons\n- Keyboard navigation support throughout admin dashboard\n- Alt text for all images\n- Form validation with clear error messages","size_bytes":9393},"client/src/pages/admin/Players.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Trash2, Edit2 } from \"lucide-react\";\nimport { ImageUpload } from \"@/components/admin/ImageUpload\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n/**\n * Player Interface - Updated with new fields\n * - awardsWon: Number of awards/titles won\n * - gamesPlayed: Total games played  \n * - biography: Player biography and background\n */\ninterface Player {\n  id?: number;\n  name: string;\n  photoUrl?: string;\n  club: string;\n  state: string;\n  category: string;\n  totalPoints: number;\n  achievements?: string;\n  awardsWon?: number;\n  gamesPlayed?: number;\n  biography?: string;\n}\n\nexport default function AdminPlayers() {\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingPlayer, setEditingPlayer] = useState<Player | null>(null);\n  const [form, setForm] = useState<Player>({\n    name: \"\",\n    photoUrl: \"\",\n    club: \"\",\n    state: \"\",\n    category: \"\",\n    totalPoints: 0,\n    achievements: \"\",\n    awardsWon: 0,\n    gamesPlayed: 0,\n    biography: \"\",\n  });\n\n  const [open, setOpen] = useState(false);\n\n  const API_URL = \"/api/players\";\n\n  // Fetch players\n  useEffect(() => {\n    fetchPlayers();\n  }, []);\n\n  const fetchPlayers = async () => {\n    setLoading(true);\n    try {\n      const res = await apiRequest(\"GET\", API_URL);\n      const data = await res.json();\n      setPlayers(data);\n    } catch (err) {\n      console.error(\"Error fetching players:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle form input\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  // Add or Edit Player\n  const handleSave = async () => {\n    const method = editingPlayer ? \"PATCH\" : \"POST\";\n    const url = editingPlayer ? `${API_URL}/${editingPlayer.id}` : API_URL;\n\n    try {\n      await apiRequest(method, url, form);\n      await fetchPlayers();\n      setForm({\n        name: \"\",\n        photoUrl: \"\",\n        club: \"\",\n        state: \"\",\n        category: \"\",\n        totalPoints: 0,\n        achievements: \"\",\n        awardsWon: 0,\n        gamesPlayed: 0,\n        biography: \"\",\n      });\n      setEditingPlayer(null);\n      setOpen(false);\n    } catch (err) {\n      console.error(\"Error saving player:\", err);\n    }\n  };\n\n  // Delete player\n  const handleDelete = async (id: number) => {\n    if (!confirm(\"Are you sure you want to delete this player?\")) return;\n    try {\n      await apiRequest(\"DELETE\", `${API_URL}/${id}`);\n      setPlayers(players.filter((p) => p.id !== id));\n    } catch (err) {\n      console.error(\"Error deleting player:\", err);\n    }\n  };\n\n  // Open Edit Dialog\n  const handleEdit = (player: Player) => {\n    setEditingPlayer(player);\n    setForm(player);\n    setOpen(true);\n  };\n\n  return (\n    <div>\n      {/* Header Section */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Players Management</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage registered athletes — Add, Edit, or Delete players\n          </p>\n        </div>\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button\n              className=\"bg-primary hover:bg-primary/90\"\n              onClick={() => {\n                setEditingPlayer(null);\n                setForm({\n                  name: \"\",\n                  photoUrl: \"\",\n                  club: \"\",\n                  state: \"\",\n                  category: \"\",\n                  totalPoints: 0,\n                  achievements: \"\",\n                });\n              }}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Player\n            </Button>\n          </DialogTrigger>\n\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingPlayer ? \"Edit Player\" : \"Add Player\"}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 mt-4\">\n              <div>\n                <Label>Full Name *</Label>\n                <Input\n                  name=\"name\"\n                  placeholder=\"Player name\"\n                  value={form.name}\n                  onChange={handleChange}\n                />\n              </div>\n              <ImageUpload\n                label=\"Player Photo\"\n                value={form.photoUrl || \"\"}\n                onChange={(url) => setForm({ ...form, photoUrl: url })}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Club *</Label>\n                  <Input\n                    name=\"club\"\n                    placeholder=\"Club name\"\n                    value={form.club}\n                    onChange={handleChange}\n                  />\n                </div>\n                <div>\n                  <Label>State *</Label>\n                  <Input\n                    name=\"state\"\n                    placeholder=\"Lagos State\"\n                    value={form.state}\n                    onChange={handleChange}\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Category *</Label>\n                  <Input\n                    name=\"category\"\n                    placeholder=\"Senior Male\"\n                    value={form.category}\n                    onChange={handleChange}\n                  />\n                </div>\n                <div>\n                  <Label>Total Points</Label>\n                  <Input\n                    type=\"number\"\n                    name=\"totalPoints\"\n                    value={form.totalPoints}\n                    onChange={handleChange}\n                  />\n                </div>\n              </div>\n              <div>\n                <Label>Achievements</Label>\n                <Textarea\n                  name=\"achievements\"\n                  placeholder=\"List of achievements...\"\n                  value={form.achievements}\n                  onChange={handleChange}\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Awards Won</Label>\n                  <Input\n                    type=\"number\"\n                    name=\"awardsWon\"\n                    value={form.awardsWon || 0}\n                    onChange={handleChange}\n                    placeholder=\"0\"\n                  />\n                </div>\n                <div>\n                  <Label>Games Played</Label>\n                  <Input\n                    type=\"number\"\n                    name=\"gamesPlayed\"\n                    value={form.gamesPlayed || 0}\n                    onChange={handleChange}\n                    placeholder=\"0\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label>Biography</Label>\n                <Textarea\n                  name=\"biography\"\n                  placeholder=\"Player biography and background...\"\n                  value={form.biography || \"\"}\n                  onChange={handleChange}\n                  className=\"min-h-[100px]\"\n                />\n              </div>\n              <Button\n                onClick={handleSave}\n                className=\"w-full bg-primary hover:bg-primary/90\"\n              >\n                {editingPlayer ? \"Update Player\" : \"Save Player\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Players List */}\n      {loading ? (\n        <p className=\"text-center text-muted-foreground py-12\">Loading players...</p>\n      ) : players.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">\n              No players registered yet. Click \"Add Player\" to register one.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {players.map((player) => (\n            <Card key={player.id} className=\"hover:shadow-md transition-all\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"font-bold text-lg\">{player.name}</h3>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(player)}\n                    >\n                      <Edit2 className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => handleDelete(player.id!)}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {player.club} — {player.state}\n                </p>\n                <p className=\"text-sm font-semibold text-primary\">\n                  {player.category}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Points: {player.totalPoints}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":9964},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/pages/Players.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trophy, MapPin } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Player } from \"@shared/schema\";\n\nexport default function Players() {\n  const { data: players = [], isLoading } = useQuery<Player[]>({\n    queryKey: [\"/api/players\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Our Athletes</h1>\n          <p className=\"text-xl md:text-2xl opacity-90 max-w-3xl\">\n            Meet Nigeria's top rope skipping athletes representing the nation in competitions worldwide.\n          </p>\n        </div>\n      </section>\n\n      {/* Players Grid */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          {isLoading ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">Loading athletes...</p>\n            </div>\n          ) : players.length === 0 ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">No athletes registered yet.</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {players.map((player) => (\n              <Card \n                key={player.id} \n                className=\"hover-elevate active-elevate-2 cursor-pointer transition-all text-center\"\n                data-testid={`card-player-${player.id}`}\n              >\n                <CardContent className=\"pt-8 space-y-4\">\n                  <div className=\"relative inline-block\">\n                    <Avatar className=\"w-24 h-24 mx-auto border-4 border-primary/20\">\n                      <AvatarImage src={player.photoUrl || undefined} alt={player.name} />\n                      <AvatarFallback className=\"bg-primary/10 text-primary text-2xl font-bold\">\n                        {player.name.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                  </div>\n\n                  <div>\n                    <h3 className=\"font-bold text-xl text-foreground mb-1\">{player.name}</h3>\n                    <Badge variant=\"secondary\" className=\"mb-2\">{player.category}</Badge>\n                  </div>\n\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-center justify-center gap-2 text-muted-foreground\">\n                      <Trophy className=\"w-4 h-4 text-primary\" />\n                      <span className=\"font-semibold text-foreground\">{player.club}</span>\n                    </div>\n                    <div className=\"flex items-center justify-center gap-2 text-muted-foreground\">\n                      <MapPin className=\"w-4 h-4 text-primary\" />\n                      <span>{player.state}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"pt-4 border-t space-y-3\">\n                    <div>\n                      <div className=\"text-sm text-muted-foreground mb-1\">Total Points</div>\n                      <div className=\"text-2xl font-bold text-primary\">{player.totalPoints}</div>\n                    </div>\n                    \n                    {(player.awardsWon !== undefined && player.awardsWon !== null && player.awardsWon > 0) && (\n                      <div>\n                        <div className=\"text-sm text-muted-foreground mb-1\">Awards Won</div>\n                        <div className=\"text-lg font-semibold text-foreground\">{player.awardsWon}</div>\n                      </div>\n                    )}\n                    \n                    {(player.gamesPlayed !== undefined && player.gamesPlayed !== null && player.gamesPlayed > 0) && (\n                      <div>\n                        <div className=\"text-sm text-muted-foreground mb-1\">Games Played</div>\n                        <div className=\"text-lg font-semibold text-foreground\">{player.gamesPlayed}</div>\n                      </div>\n                    )}\n                    \n                    {player.biography && (\n                      <div className=\"text-left\">\n                        <div className=\"text-sm text-muted-foreground mb-1\">About</div>\n                        <p className=\"text-sm text-foreground/80 line-clamp-3\">{player.biography}</p>\n                      </div>\n                    )}\n                    \n                    {player.achievements && (\n                      <div className=\"text-left\">\n                        <div className=\"text-sm text-muted-foreground mb-1\">Achievements</div>\n                        <p className=\"text-sm text-foreground/80 line-clamp-2\">{player.achievements}</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5274},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"attached_assets/drizzle.config_1761313762585.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/admin/AdminLayout.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { \n  LayoutDashboard, \n  Settings, \n  Home as HomeIcon, \n  Newspaper, \n  Calendar, \n  Users, \n  Trophy, \n  Image as ImageIcon, \n  Link as LinkIcon, \n  Mail, \n  LogOut \n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport logoUrl from \"@assets/nrsf-logo_1761313307811.jpg\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n}\n\n/**\n * AdminLayout Component\n * \n * Provides the admin dashboard layout with:\n * - JWT authentication check: Redirects to login if no token is found\n * - Sidebar navigation with all admin sections\n * - Logout functionality that clears the JWT token\n * \n * Authentication Flow:\n * 1. On mount, checks for 'adminToken' in localStorage\n * 2. If no token exists, redirects to /admin/login\n * 3. Token is set after successful login (see Login.tsx)\n * 4. Token is sent with API requests via Authorization header (see individual admin pages)\n */\nexport function AdminLayout({ children }: AdminLayoutProps) {\n  const [location] = useLocation();\n\n  // JWT Authentication Check - runs on component mount\n  useEffect(() => {\n    const token = localStorage.getItem(\"adminToken\");\n    if (!token) {\n      // No token found, redirect to login page\n      window.location.href = \"/admin/login\";\n    }\n  }, []);\n\n  // Logout handler: removes JWT token and redirects to home page\n  const handleLogout = () => {\n    localStorage.removeItem(\"adminToken\");\n    window.location.href = \"/\";\n  };\n\n  const navItems = [\n    { label: \"Dashboard\", path: \"/admin-nrsa-dashboard\", icon: LayoutDashboard },\n    { label: \"Hero Slides\", path: \"/admin-nrsa-dashboard/hero-slides\", icon: HomeIcon },\n    { label: \"News\", path: \"/admin-nrsa-dashboard/news\", icon: Newspaper },\n    { label: \"Events\", path: \"/admin-nrsa-dashboard/events\", icon: Calendar },\n    { label: \"Players\", path: \"/admin-nrsa-dashboard/players\", icon: Users },\n    { label: \"Clubs\", path: \"/admin-nrsa-dashboard/clubs\", icon: Trophy },\n    { label: \"Leaders\", path: \"/admin-nrsa-dashboard/leaders\", icon: Users },\n    { label: \"Media\", path: \"/admin-nrsa-dashboard/media\", icon: ImageIcon },\n    { label: \"Affiliations\", path: \"/admin-nrsa-dashboard/affiliations\", icon: LinkIcon },\n    { label: \"Contact Messages\", path: \"/admin-nrsa-dashboard/contacts\", icon: Mail },\n    { label: \"Site Settings\", path: \"/admin-nrsa-dashboard/settings\", icon: Settings },\n  ];\n\n  return (\n    <div className=\"flex h-screen bg-muted/20\">\n      {/* Sidebar */}\n      <aside className=\"w-72 bg-primary text-primary-foreground flex flex-col\">\n        {/* Logo */}\n        <div className=\"p-6 border-b border-primary-foreground/10\">\n          <div className=\"flex items-center gap-3\">\n            <img src={logoUrl} alt=\"NRSA Logo\" className=\"h-12 w-auto\" />\n            <div>\n              <div className=\"font-bold text-lg\">NRSA</div>\n              <div className=\"text-xs opacity-90\">Admin Panel</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 overflow-y-auto p-4 space-y-1\">\n          {navItems.map((item) => {\n            const isActive = location === item.path;\n            return (\n              <Link key={item.path} href={item.path} data-testid={`link-admin-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                <div\n                  className={`\n                    flex items-center gap-3 px-4 py-3 rounded-md cursor-pointer\n                    transition-all\n                    ${isActive \n                      ? \"bg-primary-foreground/20 border-l-4 border-white\" \n                      : \"hover-elevate active-elevate-2\"\n                    }\n                  `}\n                >\n                  <item.icon className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">{item.label}</span>\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Logout */}\n        <div className=\"p-4 border-t border-primary-foreground/10\">\n          <Button \n            variant=\"destructive\" \n            className=\"w-full justify-start gap-3\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-5 h-5\" />\n            <span>Logout</span>\n          </Button>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Top Bar */}\n        <header className=\"bg-white border-b px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              Admin Portal / {navItems.find(item => item.path === location)?.label || \"Dashboard\"}\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <span className=\"text-sm font-medium\">Administrator</span>\n            </div>\n          </div>\n        </header>\n\n        {/* Page Content */}\n        <div className=\"p-8\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":5070},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"attached_assets/drizzle.config_1761313812228.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport dotenv from \"dotenv\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport bcrypt from \"bcrypt\";\n\nimport { registerRoutes } from \"./registerRoutes\";\nimport { registerAuthRoutes } from \"./auth\";\nimport { registerUploadRoutes } from \"./upload\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { storage } from \"./storage\";\n\ndotenv.config();\n\nconst app = express();\n\n// Middleware\napp.use(express.json({ verify: (req, _res, buf) => (req as any).rawBody = buf }));\napp.use(express.urlencoded({ extended: false }));\n\n// Logging\napp.use((req, res, next) => {\n  const start = Date.now();\n  let capturedJsonResponse: Record<string, any> | undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (req.path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${req.path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      if (logLine.length > 80) logLine = logLine.slice(0, 79) + \"…\";\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Register routes\nregisterAuthRoutes(app);\nregisterUploadRoutes(app);\nregisterRoutes(app);\n\n// Global error handler\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n  const status = err.status || err.statusCode || 500;\n  const message = err.message || \"Internal Server Error\";\n  res.status(status).json({ message });\n});\n\n// Frontend\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Ensure default admin exists\nasync function ensureDefaultAdminExists() {\n  try {\n    const adminEmail = process.env.ADMIN_EMAIL || \"admin1@nrsa.com.ng\";\n    const adminPassword = process.env.ADMIN_PASSWORD || \"adminpassme2$\";\n    \n    const existingAdmin = await storage.getAdminByEmail(adminEmail);\n\n    if (!existingAdmin) {\n      const passwordHash = await bcrypt.hash(adminPassword, 10);\n      await storage.createAdmin({\n        name: process.env.ADMIN_NAME || \"Main Admin\",\n        email: adminEmail,\n        passwordHash\n      });\n      log(\"✓ Default admin user created successfully\");\n      if (!process.env.ADMIN_EMAIL) log(\"⚠ Using default admin credentials - change in env vars for production\");\n    } else {\n      log(\"✓ Default admin user already exists\");\n    }\n  } catch (error) {\n    log(`Warning: Could not create default admin user - ${error}`);\n  }\n}\n\n// Start server\n(async () => {\n  await ensureDefaultAdminExists();\n\n  if (app.get(\"env\") === \"development\") {\n    const httpServer = createServer(app);\n    await setupVite(app, httpServer);\n    httpServer.listen(process.env.PORT || 5000, () => log(`Dev server running on port ${process.env.PORT || 5000}`));\n  } else {\n    const distPath = path.join(__dirname, \"../dist\");\n    serveStatic(app);\n    app.use(express.static(distPath));\n    app.get(\"*\", (_req, res) => res.sendFile(path.join(distPath, \"index.html\")));\n    \n    // This is the single, correct app.listen call for production\n    app.listen(process.env.PORT || 5000, () => log(`Server running on port ${process.env.PORT || 5000}`));\n  }\n})();","size_bytes":3516},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"attached_assets/postcss.config_1761313812229.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Facebook, Twitter, Instagram, Mail, Phone, MapPin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport logoUrl from \"@assets/nrsf-logo_1761313307811.jpg\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-black text-white\">\n      <div className=\"max-w-7xl mx-auto px-6 md:px-12 py-16\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-12 mb-12\">\n          {/* About NRSA */}\n          <div>\n            <div className=\"flex items-center gap-3 mb-6\">\n              <img src={logoUrl} alt=\"NRSA Logo\" className=\"h-12 w-auto\" />\n              <div className=\"flex items-center gap-1\">\n                <div className=\"w-2 h-8 bg-[#009739]\" />\n                <div className=\"w-2 h-8 bg-white\" />\n                <div className=\"w-2 h-8 bg-[#009739]\" />\n              </div>\n            </div>\n            <p className=\"text-sm text-gray-400 leading-relaxed\">\n              Nigeria Rope Skipping Association (NRSA) is the official governing body for rope skipping in Nigeria, affiliated with IJRU and IRSO.\n            </p>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"font-bold text-lg mb-4 text-[#009739]\">Quick Links</h3>\n            <nav className=\"flex flex-col gap-3\">\n              {[\n                { label: \"Home\", path: \"/\" },\n                { label: \"About\", path: \"/about\" },\n                { label: \"News\", path: \"/news\" },\n                { label: \"Events\", path: \"/events\" },\n                { label: \"Players\", path: \"/players\" },\n                { label: \"Clubs\", path: \"/clubs\" },\n              ].map((item) => (\n                <Link key={item.path} href={item.path} data-testid={`link-footer-${item.label.toLowerCase()}`}>\n                  <span className=\"text-sm text-gray-400 hover:text-[#009739] transition-colors cursor-pointer\">\n                    {item.label}\n                  </span>\n                </Link>\n              ))}\n            </nav>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h3 className=\"font-bold text-lg mb-4 text-[#009739]\">Contact Info</h3>\n            <div className=\"flex flex-col gap-3 text-sm text-gray-400\">\n              <div className=\"flex items-start gap-3\">\n                <Phone className=\"w-4 h-4 mt-1 flex-shrink-0 text-[#009739]\" />\n                <span data-testid=\"text-footer-phone\">+2347069465965</span>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Mail className=\"w-4 h-4 mt-1 flex-shrink-0 text-[#009739]\" />\n                <span>rsfederationng@gmail.com</span>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <MapPin className=\"w-4 h-4 mt-1 flex-shrink-0 text-[#009739]\" />\n                <span>Lagos, Nigeria</span>\n              </div>\n            </div>\n\n            {/* Social Media */}\n            <div className=\"mt-6\">\n              <h4 className=\"font-semibold text-sm mb-3\">Follow Us</h4>\n              <div className=\"flex gap-2\">\n                <Button size=\"icon\" variant=\"ghost\" className=\"text-white hover:text-[#009739] hover-elevate active-elevate-2\" data-testid=\"button-social-facebook\">\n                  <Facebook className=\"w-5 h-5\" />\n                </Button>\n                <Button size=\"icon\" variant=\"ghost\" className=\"text-white hover:text-[#009739] hover-elevate active-elevate-2\" data-testid=\"button-social-twitter\">\n                  <Twitter className=\"w-5 h-5\" />\n                </Button>\n                <Button size=\"icon\" variant=\"ghost\" className=\"text-white hover:text-[#009739] hover-elevate active-elevate-2\" data-testid=\"button-social-instagram\">\n                  <Instagram className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Newsletter */}\n          <div>\n            <h3 className=\"font-bold text-lg mb-4 text-[#009739]\">Newsletter</h3>\n            <p className=\"text-sm text-gray-400 mb-4\">\n              Stay updated with latest news and events\n            </p>\n            <div className=\"flex gap-2\">\n              <Input\n                type=\"email\"\n                placeholder=\"Your email\"\n                className=\"bg-white/10 border-white/20 text-white placeholder:text-gray-500\"\n                data-testid=\"input-newsletter-email\"\n              />\n              <Button variant=\"default\" className=\"bg-[#009739] hover:bg-[#007a2e] text-white\" data-testid=\"button-subscribe\">\n                Subscribe\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Affiliations */}\n        <div className=\"border-t border-white/10 pt-8 mb-8\">\n          <div className=\"flex flex-col md:flex-row items-center justify-center gap-8\">\n            <div className=\"text-center\">\n              <div className=\"text-sm font-semibold text-[#009739] mb-2\">Proud Member Of</div>\n              <div className=\"flex items-center gap-6\">\n                <div className=\"text-white font-bold\">IJRU</div>\n                <div className=\"text-white font-bold\">IRSO</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Copyright */}\n        <div className=\"border-t border-white/10 pt-8 text-center text-sm text-gray-400\">\n          <p>© {new Date().getFullYear()} Nigeria Rope Skipping Association. All rights reserved.</p>\n          <p className=\"mt-2\">CAC Registered Sports Federation</p>\n          <Link href=\"/admin/login\">\n            <span className=\"inline-block mt-4 text-xs text-gray-600 hover:text-gray-500 transition-colors cursor-pointer opacity-50 hover:opacity-100\" data-testid=\"link-admin\">\n              •\n            </span>\n          </Link>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5882},"attached_assets/tailwind.config_1761313812230.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/Events.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, MapPin, Clock } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Event } from \"@shared/schema\";\n\nexport default function Events() {\n  const { data: events = [], isLoading } = useQuery<Event[]>({\n    queryKey: [\"/api/events\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Upcoming Events</h1>\n          <p className=\"text-xl md:text-2xl opacity-90 max-w-3xl\">\n            Discover championships, training camps, and rope skipping events happening across Nigeria.\n          </p>\n        </div>\n      </section>\n\n      {/* Events Grid */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          {isLoading ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">Loading events...</p>\n            </div>\n          ) : events.length === 0 ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">No upcoming events at the moment.</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {events.map((event) => (\n              <Card \n                key={event.id} \n                className={`hover-elevate active-elevate-2 transition-all h-full flex flex-col ${\n                  event.isFeatured ? \"md:col-span-2 border-primary/40\" : \"\"\n                }`}\n                data-testid={`card-event-${event.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-start justify-between gap-4 mb-3\">\n                    <div className=\"flex-shrink-0 w-16 h-16 bg-primary rounded-lg flex flex-col items-center justify-center text-white\">\n                      <div className=\"text-2xl font-bold\">{format(new Date(event.eventDate), \"dd\")}</div>\n                      <div className=\"text-xs uppercase\">{format(new Date(event.eventDate), \"MMM\")}</div>\n                    </div>\n                    <div className=\"flex-grow\">\n                      {event.isFeatured && (\n                        <Badge className=\"bg-primary text-primary-foreground mb-2\">Featured Event</Badge>\n                      )}\n                    </div>\n                  </div>\n                  <CardTitle className=\"text-2xl leading-tight\">{event.title}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex-grow space-y-4\">\n                  <p className=\"text-muted-foreground leading-relaxed\">{event.description}</p>\n                  \n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-center gap-2 text-foreground\">\n                      <MapPin className=\"w-4 h-4 text-primary\" />\n                      <span>{event.venue}, {event.city}, {event.state}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-foreground\">\n                      <Calendar className=\"w-4 h-4 text-primary\" />\n                      <span>{format(new Date(event.eventDate), \"EEEE, MMMM dd, yyyy\")}</span>\n                    </div>\n                    {event.registrationDeadline && (\n                      <div className=\"flex items-center gap-2 text-foreground\">\n                        <Clock className=\"w-4 h-4 text-primary\" />\n                        <span>Registration closes: {format(new Date(event.registrationDeadline), \"MMM dd, yyyy\")}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  <Button className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\" data-testid={`button-register-${event.id}`}>\n                    Register Now\n                  </Button>\n                </CardContent>\n              </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":4349},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"attached_assets/design_guidelines_1761313945653.md":{"content":"# Nigeria Rope Skipping Federation (NRSF) Website Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from international sports federation websites (ijru.sport, ropeskippingsport.org) while incorporating strong Nigerian national identity. The design communicates legitimacy, professionalism, and athletic energy befitting an official governing body registered with Nigeria's Corporate Affairs Commission.\n\n## Core Design Principles\n- **Official & Legitimate**: Professional sports federation aesthetic with governmental formality\n- **Energetic & Dynamic**: Reflecting the athletic, competitive nature of rope skipping\n- **Nigerian Identity**: Strong national pride through color scheme and cultural elements\n- **International Standard**: Matching the visual quality of global sports federations\n\n## Color System\n**Primary Colors**:\n- Nigerian Green: #009739 (primary brand color for CTAs, accents, active states)\n- White: #FFFFFF (backgrounds, text on dark, clean sections)\n- Black: #000000 (text, footer background, contrast elements)\n\n**Gradients**: Green-to-white gradients for section headers and decorative banners\n**Accent Usage**: NRSF logo watermark at light opacity (10-15%) on section dividers\n\n## Typography\n**Font Families**: Poppins (primary) or Montserrat (alternative) via Google Fonts CDN\n\n**Hierarchy**:\n- Hero Headlines: Bold, 48-64px (desktop), 32-40px (mobile)\n- Section Headers: Bold, 36-48px with gradient underlines\n- Card Titles: Semi-bold, 20-24px\n- Body Text: Regular, 16-18px with 1.6 line-height\n- Navigation: Medium, 16px\n- Footer: Regular, 14px\n\n## Layout System\n**Spacing Units**: Tailwind units of 4, 6, 8, 12, 16, 20, 24 for consistent rhythm\n\n**Container Widths**:\n- Full-width hero sections\n- Content sections: max-w-7xl\n- Text content: max-w-4xl\n\n**Grid Patterns**:\n- Event cards: 3-column grid (desktop), 2-column (tablet), 1-column (mobile)\n- Player profiles: 4-column grid → 2-column → 1-column\n- Club directory: 3-column grid → 2-column → 1-column\n- News cards: 3-column grid with featured first item spanning 2 columns\n\n## Component Library\n\n### Header & Navigation\n- Sticky header with NRSF logo (left-aligned)\n- Horizontal navigation menu with smooth hover underlines (green)\n- Mobile: Hamburger menu with smooth slide-in overlay\n- White background with subtle shadow on scroll\n\n### Hero Section\nAuto-rotating 4-slide carousel (5-second intervals):\n- Full-width background images with dark overlay (40% opacity)\n- Centered text overlays with white headlines and green CTA buttons\n- Smooth fade or slide transitions between slides\n- Navigation dots and prev/next arrows in white\n\n**Slide Content**:\n1. \"Welcome to Nigeria Rope Skipping Federation – Empowering Athletes Nationwide\"\n2. \"National Rope Skipping Championship – Where Champions Rise\"\n3. \"Celebrating Nigeria's Rope Skipping Athletes\"\n4. \"Join NRSF Today – Be Part of the Fastest-Growing Sport in Nigeria\"\n\n### Buttons\n- Modern rounded corners (border-radius: 8px)\n- Bold text (font-weight: 600)\n- Primary: Green background (#009739) with white text\n- Hover: Scale 1.05 transform with deeper green shadow\n- When over images: Blurred background (backdrop-filter: blur(8px)) with green tint\n- Padding: py-3 px-8\n- No active state interactions on image overlays\n\n### Cards\n**Event Cards**: White background, subtle shadow, green top border accent, hover lift effect (translateY -4px)\n\n**Player Profile Cards**: Photo at top, name, club, state, points display, gradient background on hover\n\n**Club Cards**: Logo/icon, club name, city, manager name, contact button with green accent\n\n**News Cards**: Featured image, date badge in green, title, excerpt, \"Read More\" link\n\n### Sections\n**Section Headers**: Green/white gradient banner backgrounds, white text, centered alignment, padding py-16\n\n**About Preview**: Two-column layout with text left, image right, green \"Learn More\" button\n\n**Upcoming Events**: Card grid with date prominently displayed in green circle badge\n\n**Latest News**: Featured article layout with 1 large + 2 small cards\n\n**Partner Logos**: Grayscale logos with color on hover, 4-6 per row\n\n### Footer\n- Dark background (#000000) with white text\n- Nigerian flag icon integrated\n- Four columns: About, Quick Links, Contact Info, Social Media\n- Social icons in white with green hover state\n- Copyright bar at bottom with federation registration details\n\n### Forms\n**Registration & Contact Forms**:\n- Floating labels with green accent\n- Input borders: light gray default, green on focus\n- Rounded corners (8px)\n- Validation messages in green (success) or red (error)\n- Submit button: full-width on mobile, auto-width on desktop\n\n### Media Gallery\n- Masonry/grid layout with 3-4 columns\n- Image hover: Scale 1.05 with shadow overlay\n- Video embeds with play button overlay\n- Lightbox modal for full-screen viewing\n- Lazy-loading for performance\n\n### Data Tables\n**Discipline/Fixture Tables**: Striped rows, green header background, white text in headers, responsive horizontal scroll on mobile\n\n## Animations & Interactions\n**Page Load**: Fade-in sections on scroll (subtle, 0.3s duration)\n\n**Buttons**: Ripple effect on click, scale on hover\n\n**Cards**: Lift on hover (shadow increase + translateY)\n\n**Slider**: Smooth fade transitions (1s duration) with crossfade\n\n**Navigation**: Smooth scroll behavior, green underline slide-in on hover\n\n**Gallery Images**: Zoom on hover with overlay fade-in\n\n**Admin Panel**: Slide-in from right, backdrop blur overlay\n\n## Responsive Breakpoints\n- Mobile: < 768px (single column, hamburger menu, stacked layouts)\n- Tablet: 768px - 1024px (2-column grids, adjusted spacing)\n- Desktop: > 1024px (full layouts, multi-column grids)\n\n## Images\n\n**Hero Carousel (4 slides)**: High-energy action shots of rope skipping athletes in competition, training sessions, championship ceremonies, and team celebrations. Each image should be full-width, high-resolution (1920x1080+), with dynamic composition showing movement and athleticism.\n\n**About Section**: Professional photo of federation leadership or Y-Court setup with three teams in action\n\n**Event Cards**: Competition photos, venue shots, or graphic designs with event details\n\n**Player Profiles**: Professional headshots or action shots with consistent cropping\n\n**News Articles**: Relevant event photos, championship highlights, or athlete features\n\n**Partner Logos**: Federation partners, sponsors, international affiliations (IJRU)\n\n**Background Watermarks**: NRSF logo at 10-15% opacity on section dividers\n\n**Favicon**: NRSF logo optimized for 32x32px\n\n## Accessibility\n- Semantic HTML5 structure\n- ARIA labels on interactive elements\n- Keyboard navigation support\n- Alt text on all images\n- Sufficient color contrast (WCAG AA)\n- Focus indicators in green\n\n## Performance Optimization\n- Lazy-loading for images and videos\n- Optimized font loading with font-display: swap\n- Minified CSS and JavaScript\n- Compressed images (WebP format preferred)\n- Modular JavaScript for feature separation","size_bytes":7043},"attached_assets/postcss.config_1761313762587.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/admin/Login.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\n\n/**\n * Admin Login Component\n * \n * Handles administrator authentication using JWT tokens.\n * \n * Default Admin Credentials (auto-created on server startup):\n * - Email: admin1@nrsa.com.ng\n * - Password: adminpassme2$\n * \n * Authentication Flow:\n * 1. User enters email and password\n * 2. Sends POST request to /api/admin/login\n * 3. Backend validates credentials and returns JWT token (see server/auth.ts)\n * 4. Token is stored in localStorage as 'adminToken'\n * 5. Redirects to /admin-nrsa-dashboard\n * 6. AdminLayout checks for token on protected routes\n */\nexport default function AdminLogin() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    try {\n      // Send login request to backend API\n      const res = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email, password }),\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || \"Login failed\");\n\n      // Store JWT token in localStorage for subsequent API requests\n      localStorage.setItem(\"adminToken\", data.token);\n      \n      // Redirect to admin dashboard (route fixed in App.tsx)\n      window.location.href = \"/admin-nrsa-dashboard\";\n    } catch (err: any) {\n      setError(err.message);\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-32 p-6 border rounded shadow\">\n      <h1 className=\"text-2xl font-bold mb-4\">Admin Login</h1>\n      {error && <div className=\"text-red-500 mb-4\">{error}</div>}\n      <form onSubmit={handleLogin} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"email\">Email</Label>\n          <Input \n            id=\"email\" \n            type=\"email\" \n            value={email} \n            onChange={e => setEmail(e.target.value)} \n            required \n            data-testid=\"input-admin-email\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"password\">Password</Label>\n          <Input \n            id=\"password\" \n            type=\"password\" \n            value={password} \n            onChange={e => setPassword(e.target.value)} \n            required \n            data-testid=\"input-admin-password\"\n          />\n        </div>\n        <Button \n          type=\"submit\" \n          className=\"w-full\" \n          data-testid=\"button-admin-login\"\n        >\n          Login\n        </Button>\n      </form>\n    </div>\n  );\n}","size_bytes":2773},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/Header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Menu, X, Phone } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport logoUrl from \"@assets/nrsf-logo_1761313307811.jpg\";\n\nexport function Header() {\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navItems = [\n    { label: \"Home\", path: \"/\" },\n    { label: \"About\", path: \"/about\" },\n    { label: \"News\", path: \"/news\" },\n    { label: \"Events\", path: \"/events\" },\n    { label: \"Players\", path: \"/players\" },\n    { label: \"Clubs\", path: \"/clubs\" },\n    { label: \"Leaders\", path: \"/leaders\" }, // Leaders Navigation Link is correctly kept\n    { label: \"Media\", path: \"/media\" },\n    { label: \"Contact\", path: \"/contact\" },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-white shadow-sm\">\n      {/* Top Bar with Phone */}\n      <div className=\"bg-primary text-primary-foreground\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12 py-2 flex items-center justify-between text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <Phone className=\"w-4 h-4\" />\n            <span className=\"font-medium\">+2347069465965</span>\n          </div>\n          <div className=\"text-xs\">\n            Official Governing Body for Rope Skipping in Nigeria\n          </div>\n        </div>\n      </div>\n\n      {/* Main Navigation */}\n      <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n        <div className=\"flex items-center justify-between h-20\">\n          {/* Logo */}\n          <Link href=\"/\" data-testid=\"link-home\">\n            <div className=\"flex items-center gap-3 cursor-pointer hover-elevate active-elevate-2 px-3 py-2 rounded-md transition-all\">\n              <img \n                src={logoUrl} \n                alt=\"NRSA Logo\" \n                className=\"h-14 w-auto object-contain\"\n                data-testid=\"img-logo\"\n              />\n              <div>\n                <div className=\"font-bold text-lg text-foreground leading-tight\">NRSA</div>\n                <div className=\"text-xs text-muted-foreground\">Nigeria Rope Skipping</div>\n              </div>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center gap-1\">\n            {navItems.map((item) => (\n              <Link key={item.path} href={item.path} data-testid={`link-nav-${item.label.toLowerCase()}`}>\n                <div\n                  className={`\n                    px-4 py-2 rounded-md font-medium text-sm cursor-pointer\n                    hover-elevate active-elevate-2 transition-all\n                    ${location === item.path ? \"text-primary\" : \"text-foreground\"}\n                  `}\n                >\n                  {item.label}\n                  {location === item.path && (\n                    <div className=\"h-0.5 bg-primary mt-1 rounded-full\" />\n                  )}\n                </div>\n              </Link>\n            ))}\n          </nav>\n\n          {/* Mobile Menu Button */}\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"md:hidden\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {mobileMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n          </Button>\n        </div>\n      </div>\n\n      {/* Mobile Menu Overlay */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden fixed inset-0 top-[128px] bg-primary z-50\">\n          <nav className=\"flex flex-col p-6 gap-2\">\n            {navItems.map((item) => (\n              <Link key={item.path} href={item.path} data-testid={`link-mobile-${item.label.toLowerCase()}`}>\n                <div\n                  onClick={() => setMobileMenuOpen(false)}\n                  className={`\n                    px-4 py-3 rounded-md font-semibold text-lg cursor-pointer\n                    ${location === item.path ? \"bg-white text-primary\" : \"text-white hover-elevate active-elevate-2\"}\n                  `}\n                >\n                  {item.label}\n                </div>\n              </Link>\n            ))}\n          </nav>\n        </div>\n      )}\n    </header>\n  );\n}","size_bytes":4799},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, serial, timestamp, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Admin Users\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Admins\nexport const admins = pgTable(\"admins\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertAdminSchema = createInsertSchema(admins).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAdmin = z.infer<typeof insertAdminSchema>;\nexport type Admin = typeof admins.$inferSelect;\n\n// Hero Slides\nexport const heroSlides = pgTable(\"hero_slides\", {\n  id: serial(\"id\").primaryKey(),\n  imageUrl: text(\"image_url\").notNull(),\n  headline: text(\"headline\").notNull(),\n  subheadline: text(\"subheadline\"),\n  ctaText: text(\"cta_text\"),\n  ctaLink: text(\"cta_link\"),\n  order: integer(\"order\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertHeroSlideSchema = createInsertSchema(heroSlides, {\n  order: z.coerce.number()\n    .int({ message: \"Order must be a whole number.\" })\n    .nonnegative({ message: \"Order cannot be negative.\" }),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertHeroSlide = z.infer<typeof insertHeroSlideSchema>;\nexport type HeroSlide = typeof heroSlides.$inferSelect;\n\n// News Articles\nexport const news = pgTable(\"news\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\").notNull(),\n  imageUrl: text(\"image_url\"),\n  isFeatured: boolean(\"is_featured\").notNull().default(false),\n  publishedAt: timestamp(\"published_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n/**\n * News insert schema with date string handling\n * Accepts date strings from API and converts them to Date objects\n */\nexport const insertNewsSchema = createInsertSchema(news, {\n  publishedAt: z.union([z.date(), z.string().transform((str) => new Date(str))]).optional(),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertNews = z.infer<typeof insertNewsSchema>;\nexport type News = typeof news.$inferSelect;\n\n// Events\nexport const events = pgTable(\"events\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  venue: text(\"venue\").notNull(),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  eventDate: timestamp(\"event_date\").notNull(),\n  registrationDeadline: timestamp(\"registration_deadline\"),\n  imageUrl: text(\"image_url\"),\n  isFeatured: boolean(\"is_featured\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n/**\n * Event insert schema with date string handling\n * Accepts date strings from API and converts them to Date objects\n */\nexport const insertEventSchema = createInsertSchema(events, {\n  eventDate: z.union([z.date(), z.string().transform((str) => new Date(str))]),\n  registrationDeadline: z.union([z.date(), z.string().transform((str) => new Date(str))]).optional(),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Event = typeof events.$inferSelect;\n\n/**\n * Players Table\n * Stores scrabble player profiles with statistics and information\n */\nexport const players = pgTable(\"players\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  photoUrl: text(\"photo_url\"),\n  club: text(\"club\").notNull(),\n  state: text(\"state\").notNull(),\n  category: text(\"category\").notNull(),\n  totalPoints: integer(\"total_points\").notNull().default(0),\n  achievements: text(\"achievements\"),\n  awardsWon: integer(\"awards_won\").default(0),\n  gamesPlayed: integer(\"games_played\").default(0),\n  biography: text(\"biography\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n/**\n * FIX: Overwrite the Zod schema for player numeric fields.\n * HTML forms submit numbers as strings, which causes a 400 error \n * because the auto-generated schema expects a strict 'number' type.\n * We use z.coerce.number() to allow the input to be a string but treat it as a number.\n */\nexport const insertPlayerSchema = createInsertSchema(players, {\n    // Coerce string input (e.g., \"10\") to a number (10), then validate it as an integer.\n    totalPoints: z.coerce.number()\n        .int({ message: \"Total points must be a whole number.\" })\n        .nonnegative({ message: \"Total points cannot be negative.\" }),\n    awardsWon: z.coerce.number()\n        .int({ message: \"Awards won must be a whole number.\" })\n        .nonnegative({ message: \"Awards won cannot be negative.\" }),\n    gamesPlayed: z.coerce.number()\n        .int({ message: \"Games played must be a whole number.\" })\n        .nonnegative({ message: \"Games played cannot be negative.\" }),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertPlayer = z.infer<typeof insertPlayerSchema>;\nexport type Player = typeof players.$inferSelect;\n\n// Clubs\nexport const clubs = pgTable(\"clubs\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  logoUrl: text(\"logo_url\"),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  managerName: text(\"manager_name\").notNull(),\n  contactEmail: text(\"contact_email\").notNull(),\n  contactPhone: text(\"contact_phone\").notNull(),\n  isRegistered: boolean(\"is_registered\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertClubSchema = createInsertSchema(clubs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertClub = z.infer<typeof insertClubSchema>;\nexport type Club = typeof clubs.$inferSelect;\n\n// Federation Leaders\nexport const leaders = pgTable(\"leaders\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  position: text(\"position\").notNull(),\n  photoUrl: text(\"photo_url\"),\n  bio: text(\"bio\"),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertLeaderSchema = createInsertSchema(leaders, {\n  order: z.coerce.number()\n    .int({ message: \"Order must be a whole number.\" })\n    .nonnegative({ message: \"Order cannot be negative.\" }),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertLeader = z.infer<typeof insertLeaderSchema>;\nexport type Leader = typeof leaders.$inferSelect;\n\n// Media Gallery\nexport const media = pgTable(\"media\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\").notNull(),\n  category: text(\"category\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertMediaSchema = createInsertSchema(media).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertMedia = z.infer<typeof insertMediaSchema>;\nexport type Media = typeof media.$inferSelect;\n\n// Affiliations\nexport const affiliations = pgTable(\"affiliations\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  logoUrl: text(\"logo_url\").notNull(),\n  website: text(\"website\"),\n  description: text(\"description\"),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertAffiliationSchema = createInsertSchema(affiliations, {\n  order: z.coerce.number()\n    .int({ message: \"Order must be a whole number.\" })\n    .nonnegative({ message: \"Order cannot be negative.\" }),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAffiliation = z.infer<typeof insertAffiliationSchema>;\nexport type Affiliation = typeof affiliations.$inferSelect;\n\n// Contact Submissions\nexport const contacts = pgTable(\"contacts\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n  isRead: true,\n});\n\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\n\n// Site Settings\nexport const siteSettings = pgTable(\"site_settings\", {\n  id: serial(\"id\").primaryKey(),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const insertSiteSettingSchema = createInsertSchema(siteSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertSiteSetting = z.infer<typeof insertSiteSettingSchema>;\nexport type SiteSetting = typeof siteSettings.$inferSelect;","size_bytes":9554},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"attached_assets/vite.config_1761313812231.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/pages/Home.tsx":{"content":"import { HeroCarousel } from \"@/components/HeroCarousel\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar, Users, Trophy, ChevronRight } from \"lucide-react\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Carousel */}\n      <HeroCarousel />\n\n      {/* About Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-12 items-center\">\n            {/* Text Content */}\n            <div className=\"lg:col-span-3\">\n              <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-6\">\n                About the <span className=\"text-primary\">Association</span>\n              </h2>\n              \n              <div className=\"space-y-6 text-foreground/80 leading-relaxed\">\n                <div>\n                  <h3 className=\"text-2xl font-semibold text-primary mb-3\">Our Mission</h3>\n                  <p className=\"text-lg\">\n                    To promote, develop, and regulate rope skipping across Nigeria, fostering athletic excellence \n                    and providing opportunities for all Nigerians to participate in this dynamic sport.\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-2xl font-semibold text-primary mb-3\">Our Vision</h3>\n                  <p className=\"text-lg\">\n                    To establish Nigeria as a leading force in international rope skipping, producing \n                    world-class athletes and hosting premier competitions that showcase Nigerian talent.\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-2xl font-semibold text-primary mb-3\">Our History</h3>\n                  <p className=\"text-lg\">\n                    Established as Nigeria's official governing body for rope skipping, NRSA has been instrumental \n                    in developing the sport from grassroots to elite levels across all 36 states.\n                  </p>\n                </div>\n              </div>\n\n              <Link href=\"/about\">\n                <Button className=\"mt-8 bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-6 text-lg\" data-testid=\"button-learn-more\">\n                  Learn More <ChevronRight className=\"ml-2 w-5 h-5\" />\n                </Button>\n              </Link>\n            </div>\n\n            {/* Affiliations */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"border-primary/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-primary text-center\">International Affiliations</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-8\">\n                  <div className=\"text-center\">\n                    <div className=\"inline-block px-6 py-3 bg-primary/10 rounded-lg mb-4\">\n                      <div className=\"text-3xl font-bold text-primary\">IJRU</div>\n                    </div>\n                    <h4 className=\"font-semibold text-lg mb-2\">International Jump Rope Union</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Global governing body setting international standards for rope skipping competition and excellence.\n                    </p>\n                    <a \n                      href=\"https://ijru.sport\" \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"inline-block mt-3 text-primary text-sm hover:underline\"\n                      data-testid=\"link-ijru\"\n                    >\n                      Visit IJRU.sport →\n                    </a>\n                  </div>\n\n                  <div className=\"border-t pt-6 text-center\">\n                    <div className=\"inline-block px-6 py-3 bg-primary/10 rounded-lg mb-4\">\n                      <div className=\"text-3xl font-bold text-primary\">IRSO</div>\n                    </div>\n                    <h4 className=\"font-semibold text-lg mb-2\">International Rope Skipping Organization</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Promoting rope skipping as a competitive sport and fostering international collaboration.\n                    </p>\n                  </div>\n\n                  <div className=\"bg-primary/5 p-4 rounded-lg text-center\">\n                    <span className=\"inline-block px-4 py-2 bg-primary text-primary-foreground rounded-full text-sm font-semibold\">\n                      ✓ Proud Member\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Links */}\n      <section className=\"py-16 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-center mb-12\">Explore NRSA</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Link href=\"/news\">\n              <Card className=\"cursor-pointer hover-elevate active-elevate-2 transition-all h-full\" data-testid=\"card-news\">\n                <CardHeader>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                    <Calendar className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-2xl\">Latest News</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Stay updated with the latest news, competitions, and achievements from the rope skipping community.\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/players\">\n              <Card className=\"cursor-pointer hover-elevate active-elevate-2 transition-all h-full\" data-testid=\"card-players\">\n                <CardHeader>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                    <Users className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-2xl\">Our Athletes</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Meet Nigeria's top rope skipping athletes representing the nation in competitions worldwide.\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/events\">\n              <Card className=\"cursor-pointer hover-elevate active-elevate-2 transition-all h-full\" data-testid=\"card-events\">\n                <CardHeader>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                    <Trophy className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-2xl\">Upcoming Events</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Discover upcoming championships, training camps, and rope skipping events across Nigeria.\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":7648},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Admin, type InsertAdmin,\n  type HeroSlide, type InsertHeroSlide, \n  type News, type InsertNews, type Event, type InsertEvent,\n  type Player, type InsertPlayer, type Club, type InsertClub,\n  type Leader, type InsertLeader, type Media, type InsertMedia,\n  type Affiliation, type InsertAffiliation, type Contact, type InsertContact,\n  type SiteSetting, type InsertSiteSetting,\n  users, admins, heroSlides, news, events, players, clubs, leaders,\n  media, affiliations, contacts, siteSettings\n} from \"@shared/schema\";\n\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport const storage = {\n  // Admin methods\n  getAdminByEmail: async (email: string) => {\n    const [admin] = await db.select().from(admins).where(eq(admins.email, email));\n    return admin || undefined;\n  },\n  getAdminById: async (id: number) => {\n    const [admin] = await db.select().from(admins).where(eq(admins.id, id));\n    return admin || undefined;\n  },\n  createAdmin: async (adminData: InsertAdmin) => {\n    const [created] = await db.insert(admins).values(adminData).returning();\n    return created;\n  },\n  /**\n   * Get all admin accounts (excluding password hashes for security)\n   * Used by admin management interface to list all administrators\n   */\n  getAllAdmins: async () => {\n    return await db.select({\n      id: admins.id,\n      name: admins.name,\n      email: admins.email,\n      createdAt: admins.createdAt\n    }).from(admins).orderBy(desc(admins.createdAt));\n  },\n  // Users\n  getUser: async (id: string) => {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  },\n  getUserByUsername: async (username: string) => {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  },\n  createUser: async (user: InsertUser) => {\n    const [created] = await db.insert(users).values(user).returning();\n    return created;\n  },\n\n  // Hero Slides\n  getAllHeroSlides: async () => {\n    return await db.select().from(heroSlides).orderBy(heroSlides.order);\n  },\n  getHeroSlide: async (id: number) => {\n    const [slide] = await db.select().from(heroSlides).where(eq(heroSlides.id, id));\n    return slide || undefined;\n  },\n  createHeroSlide: async (slide: InsertHeroSlide) => {\n    const [created] = await db.insert(heroSlides).values(slide).returning();\n    return created;\n  },\n  updateHeroSlide: async (id: number, data: Partial<InsertHeroSlide>) => {\n    const [updated] = await db.update(heroSlides).set(data).where(eq(heroSlides.id, id)).returning();\n    return updated || undefined;\n  },\n  deleteHeroSlide: async (id: number) => {\n    await db.delete(heroSlides).where(eq(heroSlides.id, id));\n  },\n\n  // News\n  getAllNews: async () => {\n    return await db.select().from(news).orderBy(desc(news.publishedAt));\n  },\n  getNews: async (id: number) => {\n    const [article] = await db.select().from(news).where(eq(news.id, id));\n    return article || undefined;\n  },\n  createNews: async (article: InsertNews) => {\n    const [created] = await db.insert(news).values(article).returning();\n    return created;\n  },\n  updateNews: async (id: number, data: Partial<InsertNews>) => {\n    const [updated] = await db.update(news).set(data).where(eq(news.id, id)).returning();\n    return updated || undefined;\n  },\n  deleteNews: async (id: number) => {\n    await db.delete(news).where(eq(news.id, id));\n  },\n\n  // Events\n  getAllEvents: async () => {\n    return await db.select().from(events).orderBy(desc(events.eventDate));\n  },\n  getEvent: async (id: number) => {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event || undefined;\n  },\n  createEvent: async (event: InsertEvent) => {\n    const [created] = await db.insert(events).values(event).returning();\n    return created;\n  },\n  updateEvent: async (id: number, data: Partial<InsertEvent>) => {\n    const [updated] = await db.update(events).set(data).where(eq(events.id, id)).returning();\n    return updated || undefined;\n  },\n  deleteEvent: async (id: number) => {\n    await db.delete(events).where(eq(events.id, id));\n  },\n\n  // Players\n  getAllPlayers: async () => {\n    return await db.select().from(players).orderBy(desc(players.totalPoints));\n  },\n  getPlayer: async (id: number) => {\n    const [player] = await db.select().from(players).where(eq(players.id, id));\n    return player || undefined;\n  },\n  createPlayer: async (player: InsertPlayer) => {\n    const [created] = await db.insert(players).values(player).returning();\n    return created;\n  },\n  updatePlayer: async (id: number, data: Partial<InsertPlayer>) => {\n    const [updated] = await db.update(players).set(data).where(eq(players.id, id)).returning();\n    return updated || undefined;\n  },\n  deletePlayer: async (id: number) => {\n    await db.delete(players).where(eq(players.id, id));\n  },\n\n  // Clubs\n  getAllClubs: async () => {\n    return await db.select().from(clubs).orderBy(clubs.name);\n  },\n  getClub: async (id: number) => {\n    const [club] = await db.select().from(clubs).where(eq(clubs.id, id));\n    return club || undefined;\n  },\n  createClub: async (club: InsertClub) => {\n    const [created] = await db.insert(clubs).values(club).returning();\n    return created;\n  },\n  updateClub: async (id: number, data: Partial<InsertClub>) => {\n    const [updated] = await db.update(clubs).set(data).where(eq(clubs.id, id)).returning();\n    return updated || undefined;\n  },\n  deleteClub: async (id: number) => {\n    await db.delete(clubs).where(eq(clubs.id, id));\n  },\n\n  // Leaders\n  getAllLeaders: async () => {\n    return await db.select().from(leaders).orderBy(leaders.order);\n  },\n  getLeader: async (id: number) => {\n    const [leader] = await db.select().from(leaders).where(eq(leaders.id, id));\n    return leader || undefined;\n  },\n  createLeader: async (leader: InsertLeader) => {\n    const [created] = await db.insert(leaders).values(leader).returning();\n    return created;\n  },\n  updateLeader: async (id: number, data: Partial<InsertLeader>) => {\n    const [updated] = await db.update(leaders).set(data).where(eq(leaders.id, id)).returning();\n    return updated || undefined;\n  },\n  deleteLeader: async (id: number) => {\n    await db.delete(leaders).where(eq(leaders.id, id));\n  },\n\n  // Media\n  getAllMedia: async () => {\n    return await db.select().from(media).orderBy(desc(media.createdAt));\n  },\n  getMediaItem: async (id: number) => {\n    const [item] = await db.select().from(media).where(eq(media.id, id));\n    return item || undefined;\n  },\n  createMedia: async (item: InsertMedia) => {\n    const [created] = await db.insert(media).values(item).returning();\n    return created;\n  },\n  updateMedia: async (id: number, data: Partial<InsertMedia>) => {\n    const [updated] = await db.update(media).set(data).where(eq(media.id, id)).returning();\n    return updated || undefined;\n  },\n  deleteMedia: async (id: number) => {\n    await db.delete(media).where(eq(media.id, id));\n  },\n\n  // Affiliations\n  getAllAffiliations: async () => {\n    return await db.select().from(affiliations).orderBy(affiliations.order);\n  },\n  createAffiliation: async (affiliation: InsertAffiliation) => {\n    const [created] = await db.insert(affiliations).values(affiliation).returning();\n    return created;\n  },\n  updateAffiliation: async (id: number, data: Partial<InsertAffiliation>) => {\n    const [updated] = await db.update(affiliations).set(data).where(eq(affiliations.id, id)).returning();\n    return updated || undefined;\n  },\n  deleteAffiliation: async (id: number) => {\n    await db.delete(affiliations).where(eq(affiliations.id, id));\n  },\n\n  // Contacts\n  getAllContacts: async () => {\n    return await db.select().from(contacts).orderBy(desc(contacts.createdAt));\n  },\n  createContact: async (contact: InsertContact) => {\n    const [created] = await db.insert(contacts).values(contact).returning();\n    return created;\n  },\n  updateContact: async (id: number, data: Partial<InsertContact>) => {\n    const [updated] = await db.update(contacts).set(data).where(eq(contacts.id, id)).returning();\n    return updated || undefined;\n  },\n  deleteContact: async (id: number) => {\n    await db.delete(contacts).where(eq(contacts.id, id));\n  },\n\n  // Site Settings\n  getAllSiteSettings: async () => {\n    return await db.select().from(siteSettings);\n  },\n  createSiteSetting: async (setting: InsertSiteSetting) => {\n    const [created] = await db.insert(siteSettings).values(setting).returning();\n    return created;\n  },\n  updateSiteSetting: async (id: number, data: Partial<InsertSiteSetting>) => {\n    const [updated] = await db.update(siteSettings).set(data).where(eq(siteSettings.id, id)).returning();\n    return updated || undefined;\n  },\n  deleteSiteSetting: async (id: number) => {\n    await db.delete(siteSettings).where(eq(siteSettings.id, id));\n  },\n};\n","size_bytes":8878},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/admin/Events.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Pencil, Trash2 } from \"lucide-react\";\nimport { ImageUpload } from \"@/components/admin/ImageUpload\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Event } from \"@shared/schema\";\n\nexport default function AdminEvents() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editEvent, setEditEvent] = useState<Event | null>(null);\n  const [form, setForm] = useState({\n    title: \"\",\n    description: \"\",\n    venue: \"\",\n    city: \"\",\n    state: \"\",\n    eventDate: \"\",\n    registrationDeadline: \"\",\n    imageUrl: \"\",\n    isFeatured: false,\n  });\n\n  // Load events\n  const { data: events = [] } = useQuery<Event[]>({\n    queryKey: [\"/api/events\"],\n  });\n\n  // Add or Edit Event\n  const saveEvent = useMutation({\n    mutationFn: async () => {\n      const method = editEvent ? \"PATCH\" : \"POST\";\n      const url = editEvent ? `/api/events/${editEvent.id}` : \"/api/events\";\n      await apiRequest(method, url, form);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({\n        title: editEvent ? \"Event Updated\" : \"Event Added\",\n        description: \"Event details saved successfully!\",\n      });\n      setIsDialogOpen(false);\n      setEditEvent(null);\n      setForm({\n        title: \"\",\n        description: \"\",\n        venue: \"\",\n        city: \"\",\n        state: \"\",\n        eventDate: \"\",\n        registrationDeadline: \"\",\n        imageUrl: \"\",\n        isFeatured: false,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save event.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete Event\n  const deleteEvent = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/events/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({\n        title: \"Event Deleted\",\n        description: \"The event has been removed successfully.\",\n      });\n    },\n  });\n\n  // Handle Form Changes\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const target = e.target as HTMLInputElement;\n    const { name, value, type } = target;\n    const checked = 'checked' in target ? target.checked : false;\n    setForm((prev) => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value,\n    }));\n  };\n\n  const handleEdit = (event: Event) => {\n    setEditEvent(event);\n    setForm({\n      title: event.title,\n      description: event.description,\n      venue: event.venue,\n      city: event.city,\n      state: event.state,\n      eventDate: event.eventDate ? new Date(event.eventDate).toISOString().slice(0, 16) : \"\",\n      registrationDeadline: event.registrationDeadline\n        ? new Date(event.registrationDeadline).toISOString().slice(0, 16)\n        : \"\",\n      imageUrl: event.imageUrl || \"\",\n      isFeatured: event.isFeatured,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSave = () => {\n    saveEvent.mutate();\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Events Management</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage upcoming events and competitions\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button\n              className=\"bg-primary hover:bg-primary/90\"\n              onClick={() => setEditEvent(null)}\n              data-testid=\"button-add-event\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Event\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editEvent ? \"Edit Event\" : \"Add Event\"}</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-4 mt-4\">\n              {[\n                { label: \"Event Title *\", name: \"title\" as const, type: \"text\" },\n                { label: \"Description *\", name: \"description\" as const, type: \"textarea\" },\n                { label: \"Venue *\", name: \"venue\" as const, type: \"text\" },\n                { label: \"City *\", name: \"city\" as const, type: \"text\" },\n                { label: \"State *\", name: \"state\" as const, type: \"text\" },\n              ].map((field, idx) => (\n                <div key={idx}>\n                  <Label>{field.label}</Label>\n                  {field.type === \"textarea\" ? (\n                    <Textarea\n                      name={field.name}\n                      value={form[field.name] as string}\n                      onChange={handleChange}\n                      className=\"min-h-[120px]\"\n                    />\n                  ) : (\n                    <Input\n                      name={field.name}\n                      value={form[field.name] as string}\n                      onChange={handleChange}\n                    />\n                  )}\n                </div>\n              ))}\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Event Date *</Label>\n                  <Input\n                    type=\"datetime-local\"\n                    name=\"eventDate\"\n                    value={form.eventDate}\n                    onChange={handleChange}\n                  />\n                </div>\n                <div>\n                  <Label>Registration Deadline</Label>\n                  <Input\n                    type=\"datetime-local\"\n                    name=\"registrationDeadline\"\n                    value={form.registrationDeadline}\n                    onChange={handleChange}\n                  />\n                </div>\n              </div>\n\n              <ImageUpload\n                label=\"Event Image\"\n                value={form.imageUrl}\n                onChange={(url) => setForm((prev) => ({ ...prev, imageUrl: url }))}\n              />\n\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={form.isFeatured}\n                  onCheckedChange={(checked) =>\n                    setForm((prev) => ({ ...prev, isFeatured: checked }))\n                  }\n                />\n                <Label>Featured Event</Label>\n              </div>\n\n              <Button\n                className=\"w-full bg-primary hover:bg-primary/90\"\n                onClick={handleSave}\n                disabled={saveEvent.isPending}\n              >\n                {saveEvent.isPending\n                  ? \"Saving...\"\n                  : editEvent\n                  ? \"Update Event\"\n                  : \"Save Event\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {events.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">\n              No events yet. Click \"Add Event\" to create one.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {events.map((event) => (\n            <Card key={event.id} className=\"p-4\">\n              <CardContent>\n                <h3 className=\"font-bold text-lg\">{event.title}</h3>\n                <p className=\"text-sm text-muted-foreground\">{event.city}, {event.state}</p>\n                <div className=\"flex gap-3 mt-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(event)}\n                  >\n                    <Pencil className=\"w-4 h-4 mr-1\" /> Edit\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => deleteEvent.mutate(event.id)}\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-1\" /> Delete\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8873},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Poppins\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4056},"attached_assets/vite.config_1761313945659.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n  outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n  emptyOutDir: true,\n},\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1074},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/tailwind.config_1761313945658.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"fade-in\": {\n          from: { opacity: \"0\", transform: \"translateY(10px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"slide-in\": {\n          from: { transform: \"translateX(-100%)\" },\n          to: { transform: \"translateX(0)\" },\n        },\n        \"zoom-in\": {\n          from: { transform: \"scale(0.95)\", opacity: \"0\" },\n          to: { transform: \"scale(1)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n        \"zoom-in\": \"zoom-in 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4619},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"attached_assets/README_1761313762588.md":{"content":"# Nigeria Rope Skipping Association (NRSA) Official Website\n\n## About NRSA\n\nThe **Nigeria Rope Skipping Association (NRSA)** is the official governing body for rope skipping sports in Nigeria. As a member of the international rope skipping community, NRSA is dedicated to promoting, developing, and regulating rope skipping as a competitive sport and recreational activity across Nigeria.\n\n### Mission\nTo promote rope skipping as a competitive sport and healthy lifestyle activity throughout Nigeria, providing opportunities for athletes of all ages and skill levels to participate, compete, and excel on national and international stages.\n\n### Vision\nTo establish Nigeria as a leading force in African and global rope skipping, developing world-class athletes, fostering a vibrant rope skipping community, and making the sport accessible to every Nigerian through comprehensive programs, professional coaching, and international partnerships.\n\n## Website Purpose\n\nThis official website serves as the central hub for:\n\n1. **Information Dissemination** - Sharing news, events, and updates about rope skipping in Nigeria\n2. **Athlete & Club Registry** - Maintaining official records of registered players and affiliated clubs\n3. **Event Management** - Announcing and managing competitions, workshops, and training sessions\n4. **Media Gallery** - Showcasing photos and videos from competitions and events\n5. **Communication** - Facilitating contact between stakeholders, athletes, clubs, and the federation\n6. **Leadership Transparency** - Presenting the executive board and organizational structure\n7. **Administrative Control** - Providing a complete admin dashboard for content management\n\n## Key Features\n\n### Public Website\n- **Dynamic Homepage** with hero image slider, mission/vision statements, and featured news\n- **News Section** with articles, updates, and announcements\n- **Events Calendar** displaying upcoming and past competitions, workshops, and training sessions\n- **Players Directory** featuring registered athletes with NRSF IDs, achievements, and awards\n- **Clubs Registry** showing affiliated clubs with registration status and contact information\n- **Media Gallery** with competition photos, training videos, and promotional content\n- **Leaders Page** presenting the executive board members with photos and bios\n- **Contact Form** for inquiries and communication\n\n### Admin Dashboard\nA password-protected control panel (`/admin`) that allows administrators to:\n- **Edit Site Settings** - Update site name, tagline, mission, vision, contact email, social links\n- **Manage Leaders** - Add, edit, delete executive board members with full CRUD\n- **Manage News** - Create, edit, publish, and delete news articles with rich text and images\n- **Manage Events** - Add competitions, workshops, and events with dates, locations, and details\n- **Manage Players** - Maintain athlete registry with photos, NRSF IDs, and achievements\n- **Manage Clubs** - Update club information, logos, and registration status\n- **Manage Media** - Upload and organize photos/videos or add via URLs\n- **Edit Homepage** - Customize hero slider images/text and featured sections\n- **View Contact Submissions** - Review messages from the contact form\n\n**Admin Login:** `/admin/login`  \n**Password:** `nrsf2024admin`\n\n## Technical Architecture\n\n### Frontend\n- **Framework:** React 18 with TypeScript\n- **Build Tool:** Vite\n- **Routing:** Wouter (React Router alternative)\n- **Styling:** Tailwind CSS with custom design system\n- **Forms:** React Hook Form with Zod validation\n- **State Management:** TanStack Query (React Query v5)\n- **UI Components:** Shadcn UI component library\n- **Icons:** Lucide React\n\n### Backend\n- **Runtime:** Node.js with Express and TypeScript\n- **Data Storage:** File-based JSON storage (no database required)\n- **File Uploads:** Multer middleware for image/video uploads\n- **Email:** Nodemailer for contact form notifications to rsfederationng@gmail.com\n- **Authentication:** Simple password-based admin authentication\n\n### Data Storage Structure\nAll data is stored in JSON files located in `client/public/data/`:\n- `settings.json` - Site-wide settings (name, tagline, mission, vision, contact, social links)\n- `homepage.json` - Homepage hero slider and featured content configuration\n- `leaders.json` - Executive board members\n- `news.json` - News articles and announcements\n- `events.json` - Competitions, workshops, and events\n- `players.json` - Registered athletes and their achievements\n- `clubs.json` - Affiliated clubs and organizations\n- `media.json` - Photo and video gallery metadata\n- `contacts.json` - Contact form submissions\n\nMedia files (images/videos) are stored in `client/public/uploads/`\n\n## Design Principles\n\nThe website follows professional sports federation design standards, inspired by international organizations like IJRU.sport and the World Rope Skipping Federation:\n\n- **Color Scheme:** Deep blue (#003366) primary accent with clean white backgrounds\n- **Typography:** Inter for UI/body text, Poppins for headlines\n- **Layout:** Clean, spacious, mobile-responsive design\n- **User Experience:** Intuitive navigation, fast loading, accessible to all users\n- **Professional Aesthetic:** Credible, authoritative, yet dynamic and energetic\n\n## Development & Deployment\n\n### Installation\n```bash\nnpm install\n```\n\n### Development\n```bash\nnpm run dev\n```\nThe application runs on a single port with Vite serving the frontend and Express handling the backend.\n\n### Build for Production\n```bash\nnpm run build\nnpm run start\n```\n\n### Environment Variables\n- `NODE_ENV` - Set to 'production' for production builds\n- `PORT` - Server port (defaults to 5000)\n\n## Contact Information\n\n**Official Email:** rsfederationng@gmail.com\n\nFor technical support or website issues, please contact the NRSA technical team through the contact form on the website.\n\n---\n\n© 2024 Nigeria Rope Skipping Association (NRSA). All rights reserved.\n","size_bytes":5952},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 12%;\n\n  --sidebar-border: 0 0% 86%;\n\n  --sidebar-primary: 142 100% 29%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 90%;\n\n  --sidebar-accent-foreground: 0 0% 12%;\n\n  --sidebar-ring: 142 100% 29%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 12%;\n\n  --popover-border: 0 0% 84%;\n\n  --primary: 142 100% 29%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 88%;\n\n  --secondary-foreground: 0 0% 12%;\n\n  --muted: 0 0% 91%;\n\n  --muted-foreground: 0 0% 25%;\n\n  --accent: 142 15% 88%;\n\n  --accent-foreground: 0 0% 12%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 72%;\n  --ring: 142 100% 29%;\n  --chart-1: 142 76% 36%;\n  --chart-2: 142 60% 45%;\n  --chart-3: 0 84% 48%;\n  --chart-4: 0 72% 38%;\n  --chart-5: 0 0% 20%;\n\n  --font-sans: Poppins, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 1px 2px -1px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.05), 0px 1px 2px -1px hsl(0 0% 0% / 0.08);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.06), 0px 2px 4px -1px hsl(0 0% 0% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.08), 0px 4px 6px -1px hsl(0 0% 0% / 0.12);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.10), 0px 8px 10px -1px hsl(0 0% 0% / 0.15);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 8%;\n\n  --foreground: 0 0% 92%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 10%;\n\n  --card-foreground: 0 0% 92%;\n\n  --card-border: 0 0% 16%;\n\n  --sidebar: 0 0% 12%;\n\n  --sidebar-foreground: 0 0% 92%;\n\n  --sidebar-border: 0 0% 20%;\n\n  --sidebar-primary: 142 100% 29%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 18%;\n\n  --sidebar-accent-foreground: 0 0% 92%;\n\n  --sidebar-ring: 142 100% 29%;\n\n  --popover: 0 0% 14%;\n\n  --popover-foreground: 0 0% 92%;\n\n  --popover-border: 0 0% 22%;\n\n  --primary: 142 100% 29%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 20%;\n\n  --secondary-foreground: 0 0% 92%;\n\n  --muted: 0 0% 16%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 142 15% 18%;\n\n  --accent-foreground: 0 0% 92%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 28%;\n  --ring: 142 100% 29%;\n  --chart-1: 142 76% 55%;\n  --chart-2: 142 60% 65%;\n  --chart-3: 0 84% 65%;\n  --chart-4: 0 72% 58%;\n  --chart-5: 0 0% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.10);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.15);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 2px 4px -1px hsl(0 0% 0% / 0.35);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.35), 0px 4px 6px -1px hsl(0 0% 0% / 0.40);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.40), 0px 8px 10px -1px hsl(0 0% 0% / 0.45);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.50);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10824},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { AdminLayout } from \"@/components/admin/AdminLayout\";\nimport Home from \"@/pages/Home\";\nimport About from \"@/pages/About\";\nimport News from \"@/pages/News\";\nimport Events from \"@/pages/Events\";\nimport Players from \"@/pages/Players\";\nimport Clubs from \"@/pages/Clubs\";\nimport Leaders from \"@/pages/Leaders\";\nimport LeaderDetail from \"@/pages/LeaderDetail\";\nimport Media from \"@/pages/Media\";\nimport Contact from \"@/pages/Contact\";\nimport AdminDashboard from \"@/pages/admin/Dashboard\";\nimport AdminHeroSlides from \"@/pages/admin/HeroSlides\";\nimport AdminNews from \"@/pages/admin/News\";\nimport AdminEvents from \"@/pages/admin/Events\";\nimport AdminPlayers from \"@/pages/admin/Players\";\nimport AdminClubs from \"@/pages/admin/Clubs\";\nimport AdminLeaders from \"@/pages/admin/Leaders\";\nimport AdminMedia from \"@/pages/admin/Media\";\nimport AdminAffiliations from \"@/pages/admin/Affiliations\";\nimport AdminContacts from \"@/pages/admin/Contacts\";\nimport AdminSettings from \"@/pages/admin/Settings\";\nimport AdminLogin from \"@/pages/admin/Login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction PageWithLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Header />\n      <main className=\"flex-1\">{children}</main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <HelmetProvider>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Switch>\n            <Route path=\"/admin/login\" component={AdminLogin} />\n            \n            <Route path=\"/admin-nrsa-dashboard\">\n              <AdminLayout><AdminDashboard /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/hero-slides\">\n              <AdminLayout><AdminHeroSlides /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/news\">\n              <AdminLayout><AdminNews /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/events\">\n              <AdminLayout><AdminEvents /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/players\">\n              <AdminLayout><AdminPlayers /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/clubs\">\n              <AdminLayout><AdminClubs /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/leaders\">\n              <AdminLayout><AdminLeaders /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/media\">\n              <AdminLayout><AdminMedia /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/affiliations\">\n              <AdminLayout><AdminAffiliations /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/contacts\">\n              <AdminLayout><AdminContacts /></AdminLayout>\n            </Route>\n            <Route path=\"/admin-nrsa-dashboard/settings\">\n              <AdminLayout><AdminSettings /></AdminLayout>\n            </Route>\n            \n            <Route path=\"/\">\n              <PageWithLayout><Home /></PageWithLayout>\n            </Route>\n            <Route path=\"/about\">\n              <PageWithLayout><About /></PageWithLayout>\n            </Route>\n            <Route path=\"/news\">\n              <PageWithLayout><News /></PageWithLayout>\n            </Route>\n            <Route path=\"/events\">\n              <PageWithLayout><Events /></PageWithLayout>\n            </Route>\n            <Route path=\"/players\">\n              <PageWithLayout><Players /></PageWithLayout>\n            </Route>\n            <Route path=\"/clubs\">\n              <PageWithLayout><Clubs /></PageWithLayout>\n            </Route>\n            <Route path=\"/leaders\">\n              <PageWithLayout><Leaders /></PageWithLayout>\n            </Route>\n            <Route path=\"/leaders/:id\">\n              <PageWithLayout><LeaderDetail /></PageWithLayout>\n            </Route>\n            <Route path=\"/media\">\n              <PageWithLayout><Media /></PageWithLayout>\n            </Route>\n            <Route path=\"/contact\">\n              <PageWithLayout><Contact /></PageWithLayout>\n            </Route>\n            \n            <Route component={NotFound} />\n          </Switch>\n          <Toaster />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </HelmetProvider>\n  );\n}\n","size_bytes":4787},"client/src/pages/Clubs.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, User, Phone, Mail } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Club } from \"@shared/schema\";\n\nexport default function Clubs() {\n  const { data: clubs = [], isLoading } = useQuery<Club[]>({\n    queryKey: [\"/api/clubs\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Registered Clubs</h1>\n          <p className=\"text-xl md:text-2xl opacity-90 max-w-3xl\">\n            Discover rope skipping clubs across Nigeria, building communities and developing champions.\n          </p>\n        </div>\n      </section>\n\n      {/* Clubs Grid */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          {isLoading ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">Loading clubs...</p>\n            </div>\n          ) : clubs.length === 0 ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">No registered clubs yet.</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {clubs.map((club) => (\n                <Card\n                  key={club.id}\n                  className=\"hover-elevate active-elevate-2 transition-all h-full flex flex-col\"\n                  data-testid={`card-club-${club.id}`}\n                >\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between gap-4 mb-4\">\n                      {/* --- START Logo/Initial Display Block --- */}\n                      <div className=\"w-16 h-16 bg-primary/10 rounded-lg flex items-center justify-center overflow-hidden flex-shrink-0\">\n                        {club.logoUrl ? (\n                          <img \n                            src={club.logoUrl} \n                            alt={`${club.name} logo`} \n                            className=\"w-full h-full object-contain p-2\"\n                            // Fallback to initial if image fails to load\n                            onError={(e) => {\n                              e.currentTarget.onerror = null;\n                              e.currentTarget.style.display = 'none';\n                              // Display initial letter fallback\n                              const initialElement = e.currentTarget.parentElement?.querySelector('.club-initial');\n                              if (initialElement) initialElement.style.display = 'block';\n                            }}\n                          />\n                        ) : null}\n                        {/* Initial Letter Fallback */}\n                        <span \n                          className=\"club-initial text-3xl font-bold text-primary\"\n                          style={{ display: club.logoUrl ? 'none' : 'block' }} // Hide if logo is present\n                        >\n                          {club.name.charAt(0)}\n                        </span>\n                      </div>\n                      {/* --- END Logo/Initial Display Block --- */}\n                      \n                      {club.isRegistered && (\n                        <Badge className=\"bg-primary text-primary-foreground\">Registered</Badge>\n                      )}\n                    </div>\n                    <CardTitle className=\"text-2xl\">{club.name}</CardTitle>\n                  </CardHeader>\n\n                  <CardContent className=\"flex-grow space-y-4\">\n                    <div className=\"space-y-3 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"w-4 h-4 text-primary flex-shrink-0\" />\n                        <span className=\"text-foreground\">{club.city}, {club.state}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"w-4 h-4 text-primary flex-shrink-0\" />\n                        <div>\n                          <div className=\"text-xs text-muted-foreground\">Manager</div>\n                          <div className=\"font-medium text-foreground\">{club.managerName}</div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start gap-2\">\n                        <Mail className=\"w-4 h-4 text-primary flex-shrink-0 mt-0.5\" />\n                        <span className=\"text-muted-foreground break-all\">{club.contactEmail}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Phone className=\"w-4 h-4 text-primary flex-shrink-0\" />\n                        <span className=\"text-muted-foreground\">{club.contactPhone}</span>\n                      </div>\n                    </div>\n\n                    <Button className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\">\n                      Contact Club\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":5516},"client/src/pages/admin/Settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdminSettings() {\n  const API_URL = \"/api/site-settings\";\n\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [settings, setSettings] = useState({\n    siteTitle: \"Nigeria Rope Skipping Association\",\n    phone: \"+2347069465965\",\n    email: \"info@nrsa.ng\",\n    about: \"\",\n    facebook: \"\",\n    twitter: \"\",\n    instagram: \"\",\n  });\n\n  // Fetch settings on load\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n\n  const fetchSettings = async () => {\n    setLoading(true);\n    try {\n      const res = await apiRequest(\"GET\", API_URL);\n      const data = await res.json();\n      setSettings(data);\n    } catch (err) {\n      console.error(\"Error loading settings:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setSettings({ ...settings, [e.target.name]: e.target.value });\n  };\n\n  const handleSave = async () => {\n    setSaving(true);\n    try {\n      await apiRequest(\"POST\", API_URL, settings);\n      alert(\"✅ Settings updated successfully!\");\n    } catch (err) {\n      console.error(\"Error saving settings:\", err);\n      alert(\"❌ Failed to save settings.\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading)\n    return (\n      <p className=\"text-center text-muted-foreground py-12\">\n        Loading site settings...\n      </p>\n    );\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Site Settings</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Manage website configuration\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* General Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>General Settings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label>Site Title</Label>\n              <Input\n                name=\"siteTitle\"\n                value={settings.siteTitle}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <Label>Contact Phone</Label>\n              <Input name=\"phone\" value={settings.phone} onChange={handleChange} />\n            </div>\n            <div>\n              <Label>Contact Email</Label>\n              <Input name=\"email\" value={settings.email} onChange={handleChange} />\n            </div>\n            <div>\n              <Label>About Text (Homepage)</Label>\n              <Textarea\n                name=\"about\"\n                className=\"min-h-[120px]\"\n                value={settings.about}\n                onChange={handleChange}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Social Media */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Social Media Links</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label>Facebook URL</Label>\n              <Input\n                name=\"facebook\"\n                placeholder=\"https://facebook.com/nrsa\"\n                value={settings.facebook}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <Label>Twitter URL</Label>\n              <Input\n                name=\"twitter\"\n                placeholder=\"https://twitter.com/nrsa\"\n                value={settings.twitter}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <Label>Instagram URL</Label>\n              <Input\n                name=\"instagram\"\n                placeholder=\"https://instagram.com/nrsa\"\n                value={settings.instagram}\n                onChange={handleChange}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Button\n          onClick={handleSave}\n          disabled={saving}\n          className=\"bg-primary hover:bg-primary/90\"\n        >\n          {saving ? \"Saving...\" : \"Save Settings\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4495},"client/src/pages/admin/News.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Edit, Trash } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { ImageUpload } from \"@/components/admin/ImageUpload\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype News = {\n  id: number;\n  title: string;\n  excerpt: string;\n  content: string;\n  imageUrl?: string;\n  isFeatured?: boolean;\n  publishedAt: string;\n};\n\nexport default function AdminNews() {\n  const queryClient = useQueryClient();\n  const { data: newsItems = [] } = useQuery<News[]>({\n    queryKey: [\"/api/news\"],\n  });\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editItem, setEditItem] = useState<News | null>(null);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    excerpt: \"\",\n    content: \"\",\n    imageUrl: \"\",\n    isFeatured: false,\n  });\n\n  // 🔹 Create or Update\n  const saveMutation = useMutation({\n    mutationFn: async () => {\n      const method = editItem ? \"PATCH\" : \"POST\";\n      const url = editItem ? `/api/news/${editItem.id}` : \"/api/news\";\n\n      const res = await apiRequest(method, url, formData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/news\"] });\n      setDialogOpen(false);\n      setEditItem(null);\n      resetForm();\n    },\n  });\n\n  // 🔹 Delete\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const res = await apiRequest(\"DELETE\", `/api/news/${id}`);\n      return res.status === 204 ? null : res.json();\n    },\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: [\"/api/news\"] }),\n  });\n\n  const handleSave = () => {\n    if (!formData.title || !formData.excerpt || !formData.content) {\n      alert(\"Please fill in all required fields\");\n      return;\n    }\n    saveMutation.mutate();\n  };\n\n  const handleEdit = (item: News) => {\n    setEditItem(item);\n    setFormData({\n      title: item.title,\n      excerpt: item.excerpt,\n      content: item.content,\n      imageUrl: item.imageUrl || \"\",\n      isFeatured: item.isFeatured || false,\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this article?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const resetForm = () =>\n    setFormData({\n      title: \"\",\n      excerpt: \"\",\n      content: \"\",\n      imageUrl: \"\",\n      isFeatured: false,\n    });\n\n  return (\n    <div>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">News Management</h1>\n          <p className=\"text-muted-foreground mt-2\">Create and manage news articles</p>\n        </div>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button\n              className=\"bg-primary hover:bg-primary/90\"\n              onClick={() => {\n                setEditItem(null);\n                resetForm();\n              }}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add News\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editItem ? \"Edit News Article\" : \"Add News Article\"}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 mt-4\">\n              <div>\n                <Label>Title *</Label>\n                <Input\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"Article title\"\n                />\n              </div>\n              <div>\n                <Label>Excerpt *</Label>\n                <Textarea\n                  value={formData.excerpt}\n                  onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })}\n                  placeholder=\"Brief summary...\"\n                  className=\"min-h-[80px]\"\n                />\n              </div>\n              <div>\n                <Label>Content *</Label>\n                <Textarea\n                  value={formData.content}\n                  onChange={(e) => setFormData({ ...formData, content: e.target.value })}\n                  placeholder=\"Full article content...\"\n                  className=\"min-h-[200px]\"\n                />\n              </div>\n              <ImageUpload\n                label=\"Article Image\"\n                value={formData.imageUrl}\n                onChange={(url) => setFormData({ ...formData, imageUrl: url })}\n              />\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={formData.isFeatured}\n                  onCheckedChange={(checked) => setFormData({ ...formData, isFeatured: checked })}\n                />\n                <Label>Featured Article</Label>\n              </div>\n              <Button className=\"w-full bg-primary hover:bg-primary/90\" onClick={handleSave}>\n                {editItem ? \"Update Article\" : \"Save Article\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* News Table */}\n      {newsItems.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">\n              No news articles yet. Click \"Add News\" to create one.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <Table>\n            <TableHeader className=\"bg-primary/10\">\n              <TableRow>\n                <TableHead>Title</TableHead>\n                <TableHead>Published</TableHead>\n                <TableHead>Featured</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {newsItems.map((item) => (\n                <TableRow key={item.id}>\n                  <TableCell>{item.title}</TableCell>\n                  <TableCell>{new Date(item.publishedAt).toLocaleDateString()}</TableCell>\n                  <TableCell>{item.isFeatured ? \"Yes\" : \"No\"}</TableCell>\n                  <TableCell className=\"text-right space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(item)}\n                      className=\"hover:bg-primary/10\"\n                    >\n                      <Edit className=\"w-4 h-4 mr-1\" /> Edit\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(item.id)}\n                    >\n                      <Trash className=\"w-4 h-4 mr-1\" /> Delete\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":7594},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"design_guidelines.md":{"content":"# Nigeria Rope Skipping Association (NRSA) Website Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from international sports federation websites (IJRU.sport, World Rope Skipping Federation) while incorporating strong Nigerian national identity. The design communicates official legitimacy, professionalism, and athletic energy befitting an official governing body.\n\n## Core Design Principles\n- **Official & Authoritative**: Professional sports federation aesthetic with governmental formality\n- **Energetic & Dynamic**: Reflecting the competitive, athletic nature of rope skipping\n- **Nigerian Pride**: Strong national identity through Nigerian flag color scheme\n- **International Standard**: Matching visual quality of global sports federations\n\n## Color System\n**Primary Colors**:\n- Nigerian Green: #009739 (primary brand, CTAs, accents, active states, headers)\n- White: #FFFFFF (backgrounds, text on dark sections, clean spaces)\n- Red: #E91E63 (accent color for important CTAs, alerts, featured badges)\n- Black: #000000 (text, footer background, high contrast elements)\n\n**Usage Guidelines**:\n- Green for primary buttons, navigation active states, section headers, and brand elements\n- White for backgrounds and primary content areas\n- Red sparingly for \"Featured\" badges, urgent CTAs, and emphasis\n- Gradients: Green-to-white for section dividers and decorative banners\n- NRSA logo watermark at 10-15% opacity on section backgrounds\n\n## Typography\n**Font Families**: Poppins (primary) via Google Fonts CDN\n\n**Hierarchy**:\n- Hero Headlines: Bold, 56-72px (desktop), 36-48px (mobile)\n- Section Headers: Bold, 42-52px with green underline accents\n- Subsection Titles: Semi-bold, 28-36px\n- Card Titles: Semi-bold, 22-26px\n- Body Text: Regular, 16-18px, line-height 1.7\n- Navigation: Medium, 16-17px\n- Admin Dashboard: Semi-bold, 18-24px for headers\n- Footer Text: Regular, 14-15px\n\n## Layout System\n**Spacing Units**: Tailwind units of 4, 6, 8, 12, 16, 20, 24, 32 for consistent vertical rhythm\n\n**Container Strategy**:\n- Full-width hero carousel and section headers\n- Content sections: max-w-7xl mx-auto px-6 md:px-12\n- Text-heavy content: max-w-4xl for optimal readability\n- Admin dashboard: Full-width with fixed sidebar navigation\n\n**Grid Patterns**:\n- News cards: 3-column (desktop) → 2-column (tablet) → 1-column (mobile)\n- Event cards: 3-column with featured event spanning 2 columns\n- Player profiles: 4-column → 3-column → 2-column → 1-column\n- Club directory: 3-column → 2-column → 1-column\n- Affiliation logos: 4-6 per row, centered\n\n## Component Library\n\n### Header & Navigation\n- NRSA logo left-aligned (height 52-60px desktop, 44px mobile), maintains aspect ratio\n- Sticky header with white background, subtle shadow on scroll\n- Horizontal navigation: Home, About, News, Events, Players, Clubs, Media, Contact\n- Green hover underline animation (slide-in from left, 3px height)\n- Phone number displayed in header top bar: +2347069465965\n- Mobile: Hamburger menu with slide-in overlay (green background)\n\n### Hero Carousel\nAuto-rotating 5-second interval carousel with 11 provided competition photos:\n- Full-width images (1920x1080+) with 35% dark overlay for text readability\n- Centered white headlines with bold typography\n- Green CTA buttons with blurred background (backdrop-filter: blur(10px), green tint)\n- No hover/active states on image-overlay buttons\n- Navigation: White dots (bottom center), prev/next arrows (sides)\n- Smooth crossfade transitions (1s duration)\n\n**Slide Headlines**:\n1. \"Welcome to Nigeria Rope Skipping Association - Official Governing Body\"\n2. \"Join NRSA Today - Be Part of Nigeria's Fastest-Growing Sport\"\n3. \"National Rope Skipping Championships - Where Champions Are Made\"\n4. \"Excellence in Rope Skipping - Training the Next Generation\"\n5. \"Affiliated with IJRU & IRSO - International Standards, Nigerian Excellence\"\n\n### About the Federation Section\n**Two-column layout** (text 60%, affiliations/image 40%):\n- Mission statement with green heading\n- Vision statement with green heading  \n- Brief history of NRSA establishment\n- Organizational structure overview\n- IJRU and IRSO affiliation logos displayed prominently with links\n- \"Learn More\" button in green opening full About page\n\n### Affiliation Display\n- IJRU (International Jump Rope Union) logo with link to ijru.sport\n- IRSO logo with descriptive text\n- Grayscale logos with color on hover\n- Brief affiliation descriptions beneath each logo\n- \"Proud Member\" badge in green\n\n### Buttons\n- Rounded corners (8px border-radius)\n- Bold text (font-weight: 600)\n- Primary: Green background (#009739), white text, shadow\n- Hover: Scale 1.05, deeper green shade, increased shadow\n- Over images: Blurred green-tinted background, no hover scale\n- Padding: py-3 px-8 (desktop), py-2.5 px-6 (mobile)\n\n### Cards\n**News Cards**: White background, 3px green top border, featured badge in red, date in green circle, hover lift (translateY -5px, shadow increase)\n\n**Event Cards**: White background, prominent date badge (green circle), venue icon, \"Register\" button in green, time/location details\n\n**Player Profile Cards**: Circular photo, name, club, state, total points, gradient green overlay on hover\n\n**Club Cards**: Logo/icon top, club name, city, manager, contact button (green), registration status badge\n\n### Footer\n- Black background (#000000), white text\n- NRSA logo (left), integrated Nigerian flag icon\n- Four columns: About NRSA, Quick Links, Contact Info (+2347069465965), Social Media\n- IJRU & IRSO affiliation logos in footer\n- Social icons: White with green hover state\n- Copyright with CAC registration details\n- Newsletter subscription form with green submit button\n\n### Admin Dashboard\n**Layout**: Fixed left sidebar (280px), full-height, green background (#009739)\n- NRSA logo + \"Admin Panel\" text (white)\n- Navigation sections: Dashboard, Site Settings, Homepage Editor, News, Events, Players, Clubs, Leaders, Media, Affiliations, Contact Submissions\n- Active state: lighter green background, left border accent (white 3px)\n- Logout button (bottom, white text with red background)\n\n**Topbar**: White background, breadcrumb navigation (left), admin avatar (right)\n\n**Main Content**: Light gray background (#F9FAFB), padding p-8\n- Data tables: White background, green headers, striped rows, sortable columns\n- CRUD modals: Centered card (max-w-3xl), white background, green primary buttons\n- Rich text editor for content creation\n- Image upload: Drag-and-drop zone + URL input + browse button\n- Toast notifications: Green (success), Red (error)\n\n### Forms\n- Floating labels with green accent on focus\n- Input borders: Light gray default, green on focus (2px)\n- Rounded corners (6px)\n- Validation: Green checkmark (success), red error messages\n- Submit button: Full-width mobile, auto-width desktop\n- Contact form displays phone number: +2347069465965\n\n## Images\n\n**Hero Carousel (11 slides)**: Provided competition photos showing rope skipping athletes, award ceremonies, team celebrations, championship events. Full-width, dynamic composition.\n\n**About Section**: NRSA leadership team or federation overview image\n\n**News Articles**: Competition highlights, championship photos, athlete features\n\n**Events**: Venue shots, past competition photos, promotional graphics\n\n**Players**: Professional action shots or headshots, consistent cropping\n\n**Clubs**: Club logos and team photos\n\n**Affiliations**: IJRU and IRSO official logos\n\n**Media Gallery**: Competition photos, training sessions, championship coverage\n\n**Background Watermarks**: NRSA logo at 12% opacity on section dividers\n\n## Animations\n- Page sections: Fade-in on scroll (0.3s)\n- Buttons: Ripple effect on click, scale 1.05 on hover\n- Cards: Lift effect (translateY -5px, shadow increase)\n- Carousel: Smooth crossfade (1s)\n- Navigation: Green underline slide-in (0.25s)\n- Modals: Fade-in with backdrop blur\n- Gallery images: Zoom on hover with overlay\n\n## Responsive Breakpoints\n- Mobile: < 768px (single column, hamburger menu, stacked)\n- Tablet: 768px - 1024px (2-column grids)\n- Desktop: > 1024px (full layouts, multi-column)\n\n## Icons\n**Library**: Lucide React icons\n- Navigation: Home, Calendar, Users, Trophy, Image, Mail\n- Actions: Plus, Edit, Trash, Eye, X, Check\n- Dashboard: BarChart, Settings, Upload, Download","size_bytes":8346},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nfunction getAuthHeaders(): Record<string, string> {\n  const token = localStorage.getItem(\"adminToken\");\n  const headers: Record<string, string> = {};\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  \n  return headers;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const authHeaders = getAuthHeaders();\n  const headers = {\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    ...authHeaders,\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const authHeaders = getAuthHeaders();\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers: authHeaders,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1799},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"attached_assets/postcss.config_1761313945656.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"attached_assets/tailwind.config_1761313762589.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/pages/Media.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Image as ImageIcon } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Media } from \"@shared/schema\";\n\nexport default function Media() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"All\");\n\n  const { data: mediaItems = [], isLoading } = useQuery<Media[]>({\n    queryKey: [\"/api/media\"],\n  });\n\n  const categories = [\"All\", \"Competitions\", \"Training\", \"Events\", \"Awards\"];\n\n  const filteredMedia = selectedCategory === \"All\" \n    ? mediaItems \n    : mediaItems.filter(item => item.category === selectedCategory);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Media Gallery</h1>\n          <p className=\"text-xl md:text-2xl opacity-90 max-w-3xl\">\n            Explore photos from competitions, training sessions, and special events.\n          </p>\n        </div>\n      </section>\n\n      {/* Category Filters */}\n      <section className=\"py-8 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <div className=\"flex flex-wrap gap-2\">\n            {categories.map((category) => (\n              <Button\n                key={category}\n                variant={selectedCategory === category ? \"default\" : \"outline\"}\n                onClick={() => setSelectedCategory(category)}\n                className={selectedCategory === category ? \"bg-primary hover:bg-primary/90\" : \"\"}\n                data-testid={`button-category-${category.toLowerCase()}`}\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Media Grid */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          {isLoading ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">Loading media...</p>\n            </div>\n          ) : filteredMedia.length === 0 ? (\n            <div className=\"text-center py-20\">\n              <p className=\"text-muted-foreground text-lg\">No media items in this category.</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredMedia.map((item) => (\n              <Card \n                key={item.id} \n                className=\"overflow-hidden hover-elevate active-elevate-2 cursor-pointer transition-all\"\n                data-testid={`card-media-${item.id}`}\n              >\n                <div className=\"relative aspect-video bg-muted flex items-center justify-center\">\n                  {item.imageUrl ? (\n                    <img \n                      src={item.imageUrl} \n                      alt={item.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <ImageIcon className=\"w-16 h-16 text-muted-foreground\" />\n                  )}\n                  <div className=\"absolute top-3 right-3\">\n                    <Badge className=\"bg-primary text-primary-foreground\">{item.category}</Badge>\n                  </div>\n                </div>\n                <div className=\"p-4\">\n                  <h3 className=\"font-semibold text-lg mb-2\">{item.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                </div>\n              </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":3848},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/admin/Leaders.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Trash2, Edit2 } from \"lucide-react\";\nimport { ImageUpload } from \"@/components/admin/ImageUpload\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Leader {\n  id?: number;\n  name: string;\n  position: string;\n  photoUrl?: string;\n  bio?: string;\n  order: number;\n}\n\nexport default function AdminLeaders() {\n  const [leaders, setLeaders] = useState<Leader[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingLeader, setEditingLeader] = useState<Leader | null>(null);\n  const [form, setForm] = useState<Leader>({\n    name: \"\",\n    position: \"\",\n    photoUrl: \"\",\n    bio: \"\",\n    order: 0,\n  });\n\n  const [open, setOpen] = useState(false);\n\n  const API_URL = \"/api/leaders\";\n\n  useEffect(() => {\n    fetchLeaders();\n  }, []);\n\n  const fetchLeaders = async () => {\n    setLoading(true);\n    try {\n      const res = await apiRequest(\"GET\", API_URL);\n      const data = await res.json();\n      setLeaders(data);\n    } catch (err) {\n      console.error(\"Error fetching leaders:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleSave = async () => {\n    const method = editingLeader ? \"PATCH\" : \"POST\";\n    const url = editingLeader ? `${API_URL}/${editingLeader.id}` : API_URL;\n\n    try {\n      await apiRequest(method, url, form);\n      await fetchLeaders();\n      setForm({\n        name: \"\",\n        position: \"\",\n        photoUrl: \"\",\n        bio: \"\",\n        order: 0,\n      });\n      setEditingLeader(null);\n      setOpen(false);\n    } catch (err) {\n      console.error(\"Error saving leader:\", err);\n    }\n  };\n\n  const handleDelete = async (id: number) => {\n    if (!confirm(\"Are you sure you want to delete this leader?\")) return;\n    try {\n      await apiRequest(\"DELETE\", `${API_URL}/${id}`);\n      setLeaders(leaders.filter((l) => l.id !== id));\n    } catch (err) {\n      console.error(\"Error deleting leader:\", err);\n    }\n  };\n\n  const handleEdit = (leader: Leader) => {\n    setEditingLeader(leader);\n    setForm(leader);\n    setOpen(true);\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-page-title\">\n            Leaders Management\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage federation leaders — Add, Edit, or Delete leadership profiles\n          </p>\n        </div>\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-add-leader\"\n              onClick={() => {\n                setEditingLeader(null);\n                setForm({\n                  name: \"\",\n                  position: \"\",\n                  photoUrl: \"\",\n                  bio: \"\",\n                  order: 0,\n                });\n              }}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Leader\n            </Button>\n          </DialogTrigger>\n\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editingLeader ? \"Edit Leader\" : \"Add Leader\"}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 mt-4\">\n              <div>\n                <Label>Full Name *</Label>\n                <Input\n                  name=\"name\"\n                  placeholder=\"Leader name\"\n                  value={form.name}\n                  onChange={handleChange}\n                  data-testid=\"input-leader-name\"\n                />\n              </div>\n              <div>\n                <Label>Position *</Label>\n                <Input\n                  name=\"position\"\n                  placeholder=\"e.g., President, Vice President\"\n                  value={form.position}\n                  onChange={handleChange}\n                  data-testid=\"input-leader-position\"\n                />\n              </div>\n              <ImageUpload\n                label=\"Leader Photo\"\n                value={form.photoUrl || \"\"}\n                onChange={(url) => setForm({ ...form, photoUrl: url })}\n              />\n              <div>\n                <Label>Biography</Label>\n                <Textarea\n                  name=\"bio\"\n                  placeholder=\"Leader's biography and background...\"\n                  value={form.bio}\n                  onChange={handleChange}\n                  rows={5}\n                  data-testid=\"input-leader-bio\"\n                />\n              </div>\n              <div>\n                <Label>Display Order</Label>\n                <Input\n                  type=\"number\"\n                  name=\"order\"\n                  placeholder=\"0\"\n                  value={form.order}\n                  onChange={handleChange}\n                  data-testid=\"input-leader-order\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Lower numbers appear first (e.g., President = 0, VP = 1)\n                </p>\n              </div>\n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  onClick={handleSave}\n                  className=\"bg-primary hover:bg-primary/90 flex-1\"\n                  data-testid=\"button-save-leader\"\n                >\n                  {editingLeader ? \"Update Leader\" : \"Add Leader\"}\n                </Button>\n                <Button\n                  onClick={() => setOpen(false)}\n                  variant=\"outline\"\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {loading ? (\n        <p className=\"text-center text-muted-foreground py-12\">Loading leaders...</p>\n      ) : leaders.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">\n              No leaders added yet. Click \"Add Leader\" to create one.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {leaders.map((leader) => (\n            <Card\n              key={leader.id}\n              className=\"hover:shadow-md transition-all\"\n              data-testid={`card-leader-${leader.id}`}\n            >\n              <CardContent className=\"p-6 space-y-4\">\n                {leader.photoUrl && (\n                  <img\n                    src={leader.photoUrl}\n                    alt={leader.name}\n                    className=\"w-full h-48 object-cover rounded-md\"\n                  />\n                )}\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-lg\" data-testid={`text-leader-name-${leader.id}`}>\n                      {leader.name}\n                    </h3>\n                    <p className=\"text-sm text-primary font-semibold\" data-testid={`text-leader-position-${leader.id}`}>\n                      {leader.position}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Order: {leader.order}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(leader)}\n                      data-testid={`button-edit-${leader.id}`}\n                    >\n                      <Edit2 className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => handleDelete(leader.id!)}\n                      data-testid={`button-delete-${leader.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                {leader.bio && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                    {leader.bio}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8995},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"attached_assets/replit_1761313945657.md":{"content":"# Nigeria Rope Skipping Federation (NRSF) Website\n\n## Overview\n\nThe Nigeria Rope Skipping Federation (NRSF) website is an official sports federation platform built to promote and manage rope skipping competitions across Nigeria. The application serves as the central hub for athletes, clubs, events, news, and media related to the sport. It features the innovative Y-Court three-team competition system and provides registration capabilities for clubs and players.\n\nThe platform is designed with a strong Nigerian national identity (green, white, and black color scheme) while maintaining international sports federation standards. It targets athletes, coaches, club managers, and sports enthusiasts across Nigeria.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React 18 with TypeScript using Vite as the build tool and development server.\n\n**Routing**: Wouter - a lightweight client-side routing library chosen for its minimal footprint and simplicity over React Router.\n\n**UI Component System**: Shadcn/ui with Radix UI primitives and Tailwind CSS for styling. The design system follows the \"new-york\" style variant with a neutral base color and extensive use of CSS variables for theming. Components are configured with path aliases for clean imports.\n\n**State Management**: TanStack Query (React Query) v5 for server state management, providing caching, background refetching, and optimistic updates. No global client state management library is used - component-level state with hooks is sufficient.\n\n**Styling Approach**: Tailwind CSS utility-first framework with custom design tokens defined in CSS variables. The color system uses HSL values with alpha channel support for consistent theming. Custom utility classes include `hover-elevate` and `active-elevate-2` for interactive elevation effects.\n\n**Form Handling**: React Hook Form with Zod for schema validation via @hookform/resolvers.\n\n**Design Philosophy**: Reference-based approach inspired by international sports federation websites (ijru.sport, ropeskippingsport.org) while incorporating Nigerian national identity. The design emphasizes official legitimacy, dynamic energy, and international standards.\n\n### Backend Architecture\n\n**Server Framework**: Express.js running on Node.js with TypeScript.\n\n**API Design**: RESTful API endpoints organized under `/api/*` routes. File-based JSON storage for simplicity, with data stored in `client/public/data/` directory (news.json, events.json, players.json, clubs.json).\n\n**Session Management**: The codebase includes connect-pg-simple for PostgreSQL session storage, suggesting session-based authentication capability.\n\n**File Upload**: Multer middleware configured for handling file uploads with a 5MB limit, storing files in `client/public/uploads/`.\n\n**Email Integration**: Nodemailer configured for SMTP email sending (optional, only initialized if SMTP credentials are provided via environment variables).\n\n**Storage Pattern**: Custom storage abstraction layer (`server/storage.ts`) implementing an IStorage interface that reads/writes JSON files. This provides a consistent API for CRUD operations on news articles, events, players, clubs, and registration submissions.\n\n**Development Tooling**: Custom Vite middleware integration for hot module replacement in development. Production builds bundle the server code with esbuild.\n\n### Database Strategy\n\n**Current Implementation**: File-based JSON storage for all entities (news, events, players, clubs, registrations).\n\n**Database Configuration Present**: Drizzle ORM is configured with PostgreSQL dialect pointing to a `DATABASE_URL` environment variable. The schema is defined in `shared/schema.ts` with migrations configured to output to `./migrations` directory.\n\n**Migration Path**: The application is architected to support database migration from JSON files to PostgreSQL using Drizzle ORM. The schema definitions use Zod for runtime validation, which can be used alongside Drizzle's schema definitions.\n\n### Data Models\n\n**Core Entities** (defined in `shared/schema.ts` using Zod schemas):\n\n- **NewsArticle**: Articles with title, date, description, optional image/content\n- **Event**: Competitions with title, date, venue, description, optional image, and competition type (Standard, Sub-Standard, Open, Grand Master)\n- **Player**: Athlete profiles with name, club, state, total points, awards, optional profile photo and NRSF ID\n- **Club**: Registered clubs with name, city, state, manager details, contact info, optional email and founding year\n- **ClubRegistration**: New club registration submissions\n- **PlayerRegistration**: New player registration submissions  \n- **ContactForm**: Contact form submissions\n\n### Authentication & Authorization\n\n**Admin Authentication**: Simple password-based authentication using environment variable `ADMIN_PASSWORD` (defaults to \"nrsf2024admin\"). This is acknowledged in comments as needing proper authentication for production.\n\n**Session Infrastructure**: Connect-pg-simple package included for PostgreSQL-backed session storage, indicating planned session-based authentication system.\n\n**Current State**: No user authentication system is fully implemented - admin password is used for basic protection of admin endpoints.\n\n### File Organization\n\n**Monorepo Structure**: Single repository with clear separation:\n- `client/` - Frontend React application\n- `server/` - Backend Express application  \n- `shared/` - Shared TypeScript schemas and types\n- `client/public/` - Static assets and JSON data files\n\n**Path Aliases**:\n- `@/` → `client/src/`\n- `@shared/` → `shared/`\n- `@assets/` → `attached_assets/`\n\n### Build & Deployment\n\n**Development**: `npm run dev` runs server with tsx for TypeScript execution\n**Build**: `npm run build` creates production bundles - Vite build for frontend, esbuild for backend\n**Production**: `npm start` runs the bundled server from `dist/index.js`\n**Database**: `npm run db:push` pushes Drizzle schema changes to database\n\n**Environment Variables Required**:\n- `DATABASE_URL` - PostgreSQL connection string (if using database)\n- `SMTP_HOST`, `SMTP_PORT`, `SMTP_SECURE` - Email configuration (optional)\n- `EMAIL_USER`, `EMAIL_PASS` - Email credentials (optional)\n- `ADMIN_PASSWORD` - Admin authentication (optional, defaults to \"nrsf2024admin\")\n\n## External Dependencies\n\n### UI & Styling Libraries\n- **Radix UI**: Complete suite of unstyled, accessible UI primitives (accordion, alert-dialog, avatar, checkbox, dialog, dropdown-menu, hover-card, label, menubar, navigation-menu, popover, progress, radio-group, scroll-area, select, separator, slider, slot, switch, tabs, toast, toggle, tooltip)\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS and Autoprefixer\n- **class-variance-authority**: For creating variant-based component styles\n- **tailwind-merge**: For merging Tailwind classes intelligently\n- **clsx**: For conditional className composition\n- **Lucide React**: Icon library for UI icons\n\n### Frontend Libraries\n- **Wouter**: Lightweight React router (~1.2KB)\n- **TanStack Query**: Server state management and data fetching\n- **React Hook Form**: Form state management\n- **Zod**: TypeScript-first schema validation\n- **date-fns**: Date utility library\n\n### Backend Services\n- **Nodemailer**: Email sending library for contact forms and notifications\n- **Multer**: File upload handling middleware\n\n### Database & ORM\n- **Drizzle ORM**: TypeScript ORM configured for PostgreSQL\n- **@neondatabase/serverless**: Neon's serverless PostgreSQL driver\n- **connect-pg-simple**: PostgreSQL session store for Express\n\n### Google Fonts\n- **Poppins**: Primary font family (weights: 300-900)\n- **Montserrat**: Alternative font family (weights: 300-900)\n\n### Image Hosting\n- **Unsplash**: Sample images used throughout the application for news, events, and media galleries\n\n### Development Tools\n- **Replit-specific plugins**: Runtime error modal, cartographer, dev banner (development environment only)\n- **Vite**: Frontend build tool and dev server\n- **esbuild**: Backend bundler for production builds\n- **TypeScript**: Type safety across the entire stack","size_bytes":8224},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"attached_assets/vite.config_1761313762591.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/pages/Contact.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Phone, Mail, MapPin } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertContactSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst contactFormSchema = insertContactSchema.extend({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().optional(),\n  subject: z.string().min(3, \"Subject must be at least 3 characters\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n\nexport default function Contact() {\n  const { toast } = useToast();\n  \n  const form = useForm<z.infer<typeof contactFormSchema>>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const createContact = useMutation({\n    mutationFn: async (data: z.infer<typeof contactFormSchema>) => {\n      return await apiRequest(\"POST\", \"/api/contacts\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent!\",\n        description: \"Thank you for contacting us. We'll get back to you soon.\",\n      });\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: z.infer<typeof contactFormSchema>) => {\n    createContact.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Contact Us</h1>\n          <p className=\"text-xl md:text-2xl opacity-90 max-w-3xl\">\n            Get in touch with NRSA for inquiries, registrations, or support.\n          </p>\n        </div>\n      </section>\n\n      {/* Contact Content */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n            {/* Contact Information */}\n            <div className=\"lg:col-span-1 space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-primary\">Get In Touch</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Phone className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Phone</h3>\n                      <p className=\"text-sm text-muted-foreground\" data-testid=\"text-contact-phone\">+2347069465965</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Mail className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Email</h3>\n                      <p className=\"text-sm text-muted-foreground\">rsfederationng@gmail.com</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <MapPin className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Office</h3>\n                      <p className=\"text-sm text-muted-foreground\">Lagos, Nigeria</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-primary text-primary-foreground\">\n                <CardContent className=\"pt-6\">\n                  <h3 className=\"font-bold text-lg mb-2\">Office Hours</h3>\n                  <p className=\"text-sm opacity-90\">Monday - Friday</p>\n                  <p className=\"text-sm opacity-90\">8:00 AM - 5:00 PM WAT</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Contact Form */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-2xl\">Send Us a Message</CardTitle>\n                  <p className=\"text-muted-foreground\">Fill out the form below and we'll get back to you as soon as possible.</p>\n                </CardHeader>\n                <CardContent>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={form.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Name *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Your full name\" {...field} data-testid=\"input-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email *</FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" placeholder=\"your.email@example.com\" {...field} data-testid=\"input-email\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={form.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Phone (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"+234 xxx xxx xxxx\" {...field} data-testid=\"input-phone\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"subject\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Subject *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"What is this about?\" {...field} data-testid=\"input-subject\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"message\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Message *</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Tell us how we can help...\" \n                                className=\"min-h-[150px] resize-none\"\n                                {...field} \n                                data-testid=\"input-message\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full md:w-auto bg-primary hover:bg-primary/90 text-primary-foreground px-8\"\n                        disabled={createContact.isPending}\n                        data-testid=\"button-submit\"\n                      >\n                        {createContact.isPending ? \"Sending...\" : \"Send Message\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":9710},"client/src/pages/About.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Target, Eye, Users, Award } from \"lucide-react\";\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">About NRSA</h1>\n          <p className=\"text-xl md:text-2xl opacity-90 max-w-3xl\">\n            Nigeria Rope Skipping Association - Committed to excellence, integrity, and developing world-class athletes.\n          </p>\n        </div>\n      </section>\n\n      {/* Mission & Vision */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-16\">\n            <Card className=\"border-primary/20\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Target className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-3xl text-primary\">Our Mission</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent className=\"text-lg leading-relaxed text-foreground/80\">\n                To promote, develop, and regulate rope skipping across Nigeria, fostering athletic excellence \n                and providing opportunities for all Nigerians to participate in this dynamic sport. We are \n                committed to creating pathways for athletes from grassroots to elite levels.\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-primary/20\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Eye className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-3xl text-primary\">Our Vision</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent className=\"text-lg leading-relaxed text-foreground/80\">\n                To establish Nigeria as a leading force in international rope skipping, producing world-class \n                athletes and hosting premier competitions that showcase Nigerian talent on the global stage. \n                We envision a future where rope skipping is recognized as a mainstream sport in Nigeria.\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* History */}\n          <Card className=\"mb-16\">\n            <CardHeader>\n              <CardTitle className=\"text-3xl text-primary\">Our History</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 text-lg leading-relaxed text-foreground/80\">\n              <p>\n                The Nigeria Rope Skipping Association (NRSA) was established as the official governing body \n                for rope skipping in Nigeria, with the mandate to organize, promote, and develop the sport \n                across all 36 states and the Federal Capital Territory.\n              </p>\n              <p>\n                Since our inception, we have been instrumental in creating structured pathways for athletes, \n                from grassroots development programs to elite-level competitions. Our affiliation with \n                international bodies such as the International Jump Rope Union (IJRU) and the International \n                Rope Skipping Organization (IRSO) ensures that Nigerian athletes compete at the highest \n                standards globally.\n              </p>\n              <p>\n                NRSA has successfully organized numerous national championships, training camps, and \n                certification programs for coaches and officials. We continue to work tirelessly to expand \n                the reach of rope skipping to schools, communities, and athletic clubs nationwide.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Organizational Structure */}\n          <div className=\"mb-16\">\n            <h2 className=\"text-3xl font-bold text-primary mb-8\">Organizational Structure</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card className=\"text-center\">\n                <CardContent className=\"pt-8\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Users className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Executive Board</h3>\n                  <p className=\"text-muted-foreground\">\n                    Strategic leadership and governance oversight\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"pt-8\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Award className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Technical Committee</h3>\n                  <p className=\"text-muted-foreground\">\n                    Competition standards and athlete development\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"pt-8\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Users className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">State Chapters</h3>\n                  <p className=\"text-muted-foreground\">\n                    Grassroots programs across 36 states\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* International Affiliations */}\n          <div>\n            <h2 className=\"text-3xl font-bold text-primary mb-8\">International Affiliations</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <Card className=\"border-primary/20\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"text-4xl font-bold text-primary\">IJRU</div>\n                    <Badge className=\"bg-primary text-primary-foreground\">Member</Badge>\n                  </div>\n                  <CardTitle className=\"text-2xl\">International Jump Rope Union</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-foreground/80 leading-relaxed\">\n                    IJRU is the global governing body for rope skipping, setting international standards for \n                    competitions, judging, and athlete development. As a member organization, NRSA athletes \n                    compete under IJRU rules and regulations.\n                  </p>\n                  <a \n                    href=\"https://ijru.sport\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"inline-block text-primary hover:underline font-semibold\"\n                    data-testid=\"link-ijru-website\"\n                  >\n                    Visit IJRU.sport →\n                  </a>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-primary/20\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"text-4xl font-bold text-primary\">IRSO</div>\n                    <Badge className=\"bg-primary text-primary-foreground\">Affiliated</Badge>\n                  </div>\n                  <CardTitle className=\"text-2xl\">International Rope Skipping Organization</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-foreground/80 leading-relaxed\">\n                    IRSO promotes rope skipping as a competitive sport worldwide, fostering international \n                    collaboration and hosting global events. Our affiliation ensures Nigerian athletes have \n                    access to international competitions and development programs.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":8936},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"attached_assets/drizzle.config_1761313945654.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/authMiddleware.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev-secret-change-in-production\";\n\ninterface JwtPayload {\n  adminId: number;\n}\n\n// Add adminId to Request type\ninterface AdminRequest extends Request {\n  adminId?: number;\n}\n\nexport const requireAdmin = (req: AdminRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers.authorization;\n\n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    return res.status(401).json({ error: \"Unauthorized - No token provided\" });\n  }\n\n  const token = authHeader.substring(7);\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\n    req.adminId = decoded.adminId;\n    next();\n  } catch (error) {\n    return res.status(401).json({ error: \"Unauthorized - Invalid token\" });\n  }\n};\n","size_bytes":858},"client/src/pages/LeaderDetail.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Loader2, ArrowLeft, UserCheck, MapPin } from \"lucide-react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\n// --- Type Definitions (matching the admin data structure) ---\ninterface Leader {\n  id: string;\n  name: string;\n  position: string; \n  bio: string;\n  photoUrl: string;\n  state?: string; // Optional state information\n}\n\nexport default function LeaderDetail() {\n  const [match, params] = useRoute(\"/leaders/:id\");\n  const [, navigate] = useLocation();\n  const leaderId = params?.id || null;\n\n  const [leader, setLeader] = useState<Leader | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Data Fetching Effect (using standard API fetch)\n  useEffect(() => {\n    if (!leaderId) {\n      setIsLoading(false);\n      setError(\"Invalid leader ID provided in the URL.\");\n      return;\n    }\n    \n    setIsLoading(true);\n    setError(null);\n\n    const fetchLeader = async () => {\n      try {\n        // Fetch data from the standard API endpoint: /api/leaders/:id\n        const apiUrl = `/api/leaders/${leaderId}`;\n\n        const response = await fetch(apiUrl);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        \n        if (data) {\n            const fetchedLeader: Leader = {\n                id: data.id,\n                name: data.name || \"Untitled Leader\",\n                position: data.position || \"Position Pending\",\n                bio: data.bio || \"No biography provided.\",\n                photoUrl: data.photoUrl || \"https://placehold.co/600x600/009739/ffffff?text=NRSA\",\n                state: data.state || undefined, \n            };\n            setLeader(fetchedLeader);\n        } else {\n            setError(`Leader with ID ${leaderId} not found.`);\n        }\n        \n      } catch (e) {\n        console.error(\"Error fetching leader profile:\", e);\n        setError(\"Could not load leader profile. Please check the API connection.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchLeader();\n\n  }, [leaderId]); \n\n  // --- Render States ---\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-screen -mt-20\">\n        <Loader2 className=\"w-10 h-10 animate-spin text-primary\" />\n        <p className=\"ml-4 text-xl text-gray-600\">Loading Leader Profile...</p>\n      </div>\n    );\n  }\n\n  if (error || !leader) {\n    return (\n      <div className=\"text-center p-20 bg-gray-50\">\n        <h1 className=\"text-4xl font-bold text-red-600\">Error</h1>\n        <p className=\"mt-4 text-xl text-gray-600\">{error || \"Leader not found.\"}</p>\n        <Button onClick={() => navigate(\"/leaders\")} className=\"mt-8 bg-primary hover:bg-primary/90\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" /> Back to Leaders\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{leader.name} - NRSA Leadership</title>\n      </Helmet>\n      \n      <div className=\"bg-gray-50 py-16 sm:py-24\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          \n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/leaders\")} \n            className=\"mb-8 text-primary hover:bg-primary/10 transition-all duration-300 font-semibold\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" /> Back to Leadership Team\n          </Button>\n\n          <Card className=\"p-8 md:p-12 shadow-2xl rounded-xl\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-10\">\n              \n              {/* Leader Photo Section */}\n              <div className=\"lg:col-span-1\">\n                <img \n                  src={leader.photoUrl} \n                  alt={`Photo of ${leader.name}`} \n                  className=\"w-full h-auto object-cover rounded-lg shadow-xl aspect-square border-4 border-primary/20\"\n                  onError={(e) => { \n                    (e.target as HTMLImageElement).onerror = null; \n                    (e.target as HTMLImageElement).src = \"https://placehold.co/600x600/009739/ffffff?text=NRSA\"; \n                  }}\n                />\n              </div>\n\n              {/* Leader Bio and Details Section */}\n              <div className=\"lg:col-span-2\">\n                <h1 className=\"text-5xl font-extrabold tracking-tight text-gray-900 mb-2\">{leader.name}</h1>\n                \n                {/* Position */}\n                <p className=\"text-2xl font-semibold text-primary mb-3 flex items-center gap-2\">\n                    <UserCheck className=\"w-6 h-6\" />\n                    {leader.position}\n                </p>\n\n                {/* State/Location (for consistency with Player details) */}\n                {leader.state && (\n                    <p className=\"text-lg font-medium text-gray-600 mb-6 flex items-center gap-2\">\n                        <MapPin className=\"w-5 h-5 text-primary/70\" />\n                        Represents: {leader.state}\n                    </p>\n                )}\n\n                <div className=\"prose prose-lg max-w-none text-gray-700\">\n                    <h2 className=\"text-3xl font-bold text-gray-800 border-b border-primary/50 pb-2 mb-6 mt-6\">Full Biography</h2>\n                    {/* Display bio. Splitting by newline for clean paragraph breaks */}\n                    {leader.bio.split('\\n').map((paragraph, index) => (\n                        <p key={index} className=\"mb-4 leading-relaxed\">{paragraph}</p>\n                    ))}\n                    \n                    <p className=\"mt-10 text-sm italic text-gray-500 border-t pt-4\">\n                        Leadership information provided by the NRSA Administrative Team.\n                    </p>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":6074},"client/src/components/admin/ImageUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Upload, X, ImageIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface ImageUploadProps {\n  value: string;\n  onChange: (url: string) => void;\n  label?: string;\n}\n\n/**\n * ImageUpload Component\n * \n * A drag-and-drop image upload component for the admin dashboard.\n * \n * Features:\n * - Drag and drop file upload\n * - Click to browse file selection\n * - Image preview\n * - Option to use URL instead of upload\n * - File validation (images only, max 5MB)\n * - Progress indication during upload\n * \n * Usage:\n * <ImageUpload \n *   value={imageUrl} \n *   onChange={(url) => setImageUrl(url)}\n *   label=\"Hero Image\"\n * />\n * \n * Security:\n * - Requires admin JWT token (automatically included by apiRequest)\n * - Server-side validation of file type and size\n * - Only authenticated admins can upload files\n */\nexport function ImageUpload({ value, onChange, label = \"Image\" }: ImageUploadProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadError, setUploadError] = useState(\"\");\n  const [useUrl, setUseUrl] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  /**\n   * Handle file upload to server\n   * Sends file to /api/upload endpoint with admin authentication\n   */\n  const handleFileUpload = async (file: File) => {\n    // Validate file type\n    if (!file.type.startsWith(\"image/\")) {\n      setUploadError(\"Please upload an image file\");\n      return;\n    }\n\n    // Validate file size (5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      setUploadError(\"File size must be less than 5MB\");\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadError(\"\");\n\n    try {\n      // Get admin token from localStorage\n      const token = localStorage.getItem(\"adminToken\");\n      if (!token) {\n        throw new Error(\"Not authenticated\");\n      }\n\n      // Create form data\n      const formData = new FormData();\n      formData.append(\"image\", file);\n\n      // Upload to server\n      const response = await fetch(\"/api/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Upload failed\");\n      }\n\n      const data = await response.json();\n      onChange(data.url); // Update parent component with new URL\n    } catch (error: any) {\n      setUploadError(error.message || \"Upload failed\");\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // Handle drag events\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n\n    const file = e.dataTransfer.files[0];\n    if (file) {\n      handleFileUpload(file);\n    }\n  };\n\n  // Handle file selection via input\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileUpload(file);\n    }\n  };\n\n  // Trigger file input click\n  const handleBrowseClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  // Clear uploaded image\n  const handleClear = () => {\n    onChange(\"\");\n    setUploadError(\"\");\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <Label>{label}</Label>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setUseUrl(!useUrl)}\n          className=\"text-xs\"\n        >\n          {useUrl ? \"Use Upload\" : \"Use URL Instead\"}\n        </Button>\n      </div>\n\n      {useUrl ? (\n        // URL Input Mode\n        <Input\n          type=\"url\"\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder=\"https://example.com/image.jpg\"\n        />\n      ) : (\n        // Upload Mode\n        <>\n          {!value ? (\n            // Upload Area\n            <div\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onDrop={handleDrop}\n              className={`\n                border-2 border-dashed rounded-lg p-8 text-center cursor-pointer\n                transition-colors\n                ${isDragging ? \"border-primary bg-primary/5\" : \"border-gray-300 hover:border-primary/50\"}\n                ${isUploading ? \"opacity-50 pointer-events-none\" : \"\"}\n              `}\n              onClick={handleBrowseClick}\n            >\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileSelect}\n                className=\"hidden\"\n              />\n              \n              <div className=\"flex flex-col items-center gap-2\">\n                <Upload className={`w-12 h-12 ${isDragging ? \"text-primary\" : \"text-gray-400\"}`} />\n                <div>\n                  <p className=\"font-medium\">\n                    {isUploading ? \"Uploading...\" : \"Drop image here or click to browse\"}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    PNG, JPG, GIF or WebP (max 5MB)\n                  </p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            // Image Preview\n            <div className=\"relative border rounded-lg overflow-hidden\">\n              <img\n                src={value}\n                alt=\"Preview\"\n                className=\"w-full h-48 object-cover\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"destructive\"\n                size=\"icon\"\n                className=\"absolute top-2 right-2\"\n                onClick={handleClear}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          )}\n\n          {uploadError && (\n            <p className=\"text-sm text-destructive\">{uploadError}</p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":6410},"server/upload.ts":{"content":"import { Express, Request, Response, NextFunction } from \"express\";\nimport multer from \"multer\";\nimport { v2 as cloudinary } from 'cloudinary';\nimport { CloudinaryStorage } from 'multer-storage-cloudinary';\nimport { requireAdmin } from \"./authMiddleware\";\n\n/**\n * File Upload Configuration using Cloudinary Permanent Storage\n * * Images are uploaded directly to Cloudinary using the CLOUDINARY_URL \n * environment variable for credentials. This resolves the 500 error \n * caused by trying to save files locally on the ephemeral Render disk.\n * The response now returns the public Cloudinary URL.\n */\n\n// 1. Configure Cloudinary Storage\n// The Cloudinary SDK automatically reads the CLOUDINARY_URL environment variable.\nconst storage = new CloudinaryStorage({\n    cloudinary: cloudinary,\n    params: {\n        folder: \"nrsa-website-uploads\", // All files will be stored in this folder on Cloudinary\n        allowed_formats: ['jpeg', 'png', 'jpg', 'webp', 'gif'] as any, // Cloudinary type safety\n        // This function creates a safe, unique public ID for the file in Cloudinary\n        public_id: (_req, file) => {\n            const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1E9);\n            const nameWithoutExt = file.originalname.split('.').slice(0, -1).join('.');\n            const safeName = nameWithoutExt.replace(/[^a-zA-Z0-9-_]/g, \"\");\n            return `${safeName}-${uniqueSuffix}`;\n        },\n    } as any,\n});\n\n// File filter: only accept images\nconst fileFilter = (_req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n    const allowedMimes = [\"image/jpeg\", \"image/jpg\", \"image/png\", \"image/gif\", \"image/webp\"];\n    \n    if (allowedMimes.includes(file.mimetype)) {\n        cb(null, true);\n    } else {\n        cb(new Error(\"Invalid file type. Only JPEG, PNG, GIF, and WebP images are allowed.\"));\n    }\n};\n\n// Initialize multer with Cloudinary storage\nconst upload = multer({\n    storage,\n    fileFilter,\n    limits: {\n        fileSize: 5 * 1024 * 1024, // 5MB limit\n    }\n});\n\n/**\n * Register file upload routes\n * * @param app - Express application instance\n */\nexport function registerUploadRoutes(app: Express) {\n    const uploadMiddleware = upload.single(\"image\");\n\n    /**\n     * Helper middleware to handle Multer errors (like file size limits or file type)\n     * and return a proper 400 Bad Request instead of a generic 500.\n     */\n    const handleMulterErrors = (req: Request, res: Response, next: NextFunction) => {\n        uploadMiddleware(req, res, (err) => {\n            if (err instanceof multer.MulterError) {\n                // e.g., 'File too large' or other internal Multer limits\n                return res.status(400).json({ error: err.message });\n            } else if (err) {\n                // Custom error from fileFilter (e.g., 'Invalid file type')\n                return res.status(400).json({ error: err.message });\n            }\n            next();\n        });\n    };\n    \n    /**\n     * Image Upload Endpoint\n     * POST /api/upload\n     * * The file is uploaded to Cloudinary and the public URL is returned.\n     */\n    app.post(\"/api/upload\", requireAdmin, handleMulterErrors, (req: Request, res: Response) => {\n        try {\n            // Cloudinary's storage engine extends req.file with its own properties (path/secure_url)\n            const uploadedFile = req.file as Express.Multer.File & { path: string, secure_url: string, filename: string };\n            \n            if (!uploadedFile) {\n                return res.status(400).json({ error: \"No file uploaded\" });\n            }\n\n            // req.file.secure_url contains the publicly accessible Cloudinary URL\n            const fileUrl = uploadedFile.secure_url || uploadedFile.path;\n            \n            res.json({ \n                url: fileUrl, // <--- This is the permanent, public URL\n                filename: uploadedFile.filename, // Cloudinary public_id\n                size: uploadedFile.size,\n                mimetype: uploadedFile.mimetype\n            });\n        } catch (error: any) {\n            // Fallback for unexpected errors inside the final route handler\n            console.error(\"Cloudinary upload final handler error:\", error);\n            res.status(500).json({ error: error.message || \"Upload failed\" });\n        }\n    });\n}","size_bytes":4308},"replit.md":{"content":"# Nigeria Rope Skipping Association (NRSA) Website\n\n## Overview\n\nThe Nigeria Rope Skipping Association (NRSA) website is an official sports federation platform built to promote and manage rope skipping as a competitive sport across Nigeria. The application serves as the central hub for news, events, athlete registries, club management, and administrative control. It features a public-facing website showcasing Nigerian national identity through the green-white-black color scheme while maintaining international sports federation standards, alongside a comprehensive admin dashboard for content management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React 18 with TypeScript, built using Vite as the development server and build tool. The choice of Vite provides fast hot module replacement during development and optimized production builds.\n\n**Routing**: Wouter - a minimalist client-side routing library chosen for its small bundle size (~1.2KB) and simplicity over heavier alternatives like React Router. Routes are organized with admin routes prioritized first, followed by public routes.\n\n**UI Component Library**: Shadcn/ui built on Radix UI primitives with Tailwind CSS for styling. The design system follows the \"new-york\" style variant with a neutral base color palette. Components are highly customizable through CSS variables defined in HSL format with alpha channel support, enabling consistent theming across the application.\n\n**State Management**: TanStack Query (React Query) v5 handles all server state management, providing built-in caching, background refetching, automatic retries, and optimistic updates. No separate global client state library is used - component state is managed locally with React hooks.\n\n**Form Management**: React Hook Form with Zod schema validation via @hookform/resolvers. This combination provides type-safe form handling with minimal re-renders and automatic validation.\n\n**Styling Strategy**: Tailwind CSS utility-first framework with custom design tokens. The color system uses HSL values with CSS variables for dynamic theming. Custom utility classes (`hover-elevate`, `active-elevate-2`) provide consistent interaction states. Typography uses Poppins font via Google Fonts CDN with a defined hierarchy for headlines, body text, and UI elements.\n\n**Design Philosophy**: Reference-based approach inspired by international sports federation websites (ijru.sport) while incorporating strong Nigerian national identity through the green (#009739), white, and black color scheme. The design balances professional authority with athletic dynamism.\n\n### Backend Architecture\n\n**Server Framework**: Express.js running on Node.js with TypeScript, configured as ESM modules. The server handles both API routes and static file serving in production.\n\n**API Design**: RESTful API with endpoints organized under `/api/*` routes. Standard CRUD operations are available for all entities (news, events, players, clubs, leaders, media, affiliations, contacts, site settings). Admin endpoints are protected with JWT authentication middleware.\n\n**Authentication System**: JWT-based authentication with bcrypt password hashing (10 rounds). Admin login returns a token valid for 8 hours. The `requireAdmin` middleware validates JWT tokens on protected routes. Tokens are stored in localStorage on the client and sent via Authorization header.\n\n**File Upload Strategy**: Multer middleware configured with Cloudinary permanent storage. Files are uploaded directly to Cloudinary using the `multer-storage-cloudinary` package, resolving ephemeral filesystem issues on platforms like Render. Images are stored in the `nrsa-website-uploads` folder with a 5MB file size limit and type validation (JPEG, PNG, GIF, WebP).\n\n**Database Layer**: Drizzle ORM with PostgreSQL via the standard `pg` driver (not Neon serverless). The `storage` object in `server/storage.ts` provides a clean abstraction layer for all database operations, implementing methods for CRUD operations on all entities. Database credentials are configured via the `DATABASE_URL` environment variable.\n\n**Development Workflow**: Custom Vite middleware integration enables hot module replacement in development. The server serves the Vite dev server in development mode and static built files in production. Logging middleware tracks API request duration and response data.\n\n### Database Schema\n\n**ORM**: Drizzle ORM chosen for its TypeScript-first approach, lightweight footprint, and SQL-like query builder. Schema definitions use Drizzle's column type builders with type inference.\n\n**Dialect**: PostgreSQL configured through `drizzle.config.ts`. Migrations are stored in the `./migrations` directory with schema definitions in `shared/schema.ts`.\n\n**Core Entities**:\n- **Admins**: Admin accounts with bcrypt-hashed passwords for dashboard access\n- **Hero Slides**: Homepage carousel images with headlines, subheadlines, CTAs, and ordering\n- **News**: Articles with titles, content, images, categories, and publication dates\n- **Events**: Competitions and training sessions with dates, locations, descriptions, and featured status\n- **Players**: Athlete registry with photos, NRSA IDs, achievements, state information\n- **Clubs**: Affiliated organizations with logos, contact details, registration status\n- **Leaders**: Executive board members with photos, positions, bios, and display order\n- **Media**: Photo/video gallery with categories and URLs\n- **Affiliations**: International organization memberships\n- **Contacts**: Form submissions from the public contact page\n- **Site Settings**: Configurable site metadata (name, tagline, mission, vision, contact info, social links)\n\n**Schema Validation**: Drizzle-Zod generates Zod schemas from Drizzle table definitions, ensuring type safety between database operations and API validation.\n\n**Relationships**: The schema uses Drizzle's relations API to define foreign key relationships where applicable, though the current implementation is primarily flat with minimal joins.\n\n## External Dependencies\n\n### Cloud Services\n\n**Cloudinary**: Image hosting and CDN service for all uploaded media. Credentials are configured via the `CLOUDINARY_URL` environment variable. The service handles image transformations, optimization, and delivery with the Cloudinary SDK (`cloudinary` package and `multer-storage-cloudinary`).\n\n**AWS S3**: The codebase includes the AWS SDK (`@aws-sdk/client-s3`) suggesting potential S3 integration for file storage, though Cloudinary is the active implementation.\n\n### Database\n\n**PostgreSQL**: Primary data store accessed via Drizzle ORM with the standard Node.js `pg` driver. Connection pooling is configured through the `Pool` class from the `pg` package.\n\n### Email (Optional)\n\n**Nodemailer**: Email sending capability for contact form notifications. The implementation is conditional - only initialized if SMTP credentials are provided via environment variables (SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS).\n\n### Authentication\n\n**bcrypt**: Password hashing library for admin account security (version ^6.0.0)\n**jsonwebtoken**: JWT token generation and validation for admin sessions\n\n### UI Libraries\n\n**Radix UI**: Comprehensive set of accessible React components including accordion, alert-dialog, avatar, checkbox, dialog, dropdown-menu, hover-card, label, navigation-menu, popover, progress, radio-group, scroll-area, select, separator, slider, switch, tabs, toast, toggle, and tooltip primitives.\n\n**Embla Carousel**: Lightweight carousel implementation used for the hero slider (`embla-carousel-react`).\n\n### Utility Libraries\n\n**date-fns**: Date formatting and manipulation (v3.6.0)\n**axios**: HTTP client for external API requests (v1.12.2)\n**class-variance-authority**: CVA for building variant-based component APIs\n**clsx** & **tailwind-merge**: Utility for conditional className composition\n**nanoid**: Unique ID generation\n\n### Development Tools\n\n**Replit Plugins**: Custom Vite plugins for Replit integration including runtime error modal, cartographer for debugging, and dev banner (only loaded in development when `REPL_ID` is defined).\n\n**TypeScript**: Strict type checking with ES2020 target and ESNext module format. Path aliases configured for `@/*` (client), `@shared/*` (shared), and `@assets/*` (attached assets).\n\n**Cross-env**: Environment variable handling across platforms for npm scripts.","size_bytes":8492},"client/src/pages/Leaders.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Loader2, Zap, UserCheck, MapPin } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface Leader {\n  id: number;\n  name: string;\n  position: string;\n  bio: string;\n  photoUrl: string;\n  order: number;\n  state?: string;\n}\n\nconst API_URL = \"/api/leaders\";\n\nexport default function Leaders() {\n  const [, navigate] = useLocation();\n  \n  const [leaders, setLeaders] = useState<Leader[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchLeaders = async () => {\n        try {\n            const response = await fetch(API_URL);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const data: Leader[] = await response.json();\n            \n            data.sort((a, b) => a.order - b.order);\n            \n            setLeaders(data);\n            setError(null);\n            \n        } catch (e) {\n            console.error(\"Error fetching leaders list:\", e);\n            setError(\"Could not load leadership data. Please check the API connection.\");\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    fetchLeaders();\n  }, []);\n\n  const handleReadBio = (leaderId: number) => {\n    navigate(`/leaders/${leaderId}`);\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex justify-center items-center h-40\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n          <p className=\"ml-4 text-lg text-gray-600\">Loading Leadership...</p>\n        </div>\n      );\n    }\n\n    if (error) {\n      return (\n        <div className=\"text-center p-8 bg-red-50 border border-red-300 rounded-lg shadow-md\">\n          <p className=\"font-semibold text-red-700\">Error Loading Data</p>\n          <p className=\"text-sm text-red-600\">{error}</p>\n        </div>\n      );\n    }\n    \n    if (leaders.length === 0) {\n        return (\n            <div className=\"text-center p-12 bg-yellow-50 border border-yellow-300 rounded-lg shadow-md\">\n                <Zap className=\"w-8 h-8 text-yellow-600 mx-auto mb-4\" />\n                <p className=\"font-semibold text-xl text-yellow-700\">No Leaders Found</p>\n                <p className=\"mt-2 text-md text-yellow-600\">Leader profiles will appear here once added in the admin dashboard.</p>\n            </div>\n        );\n    }\n\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {leaders.map((leader) => (\n          <Card \n            key={leader.id} \n            className=\"group overflow-hidden shadow-lg transition-all duration-300 hover:shadow-2xl border-t-8 border-primary/70 rounded-xl cursor-pointer hover-elevate active-elevate-2\"\n            onClick={() => handleReadBio(leader.id)}\n          >\n            <div className=\"h-48 w-full overflow-hidden bg-gray-100\">\n                <img \n                    src={leader.photoUrl} \n                    alt={`Photo of ${leader.name}`} \n                    className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-105\"\n                    onError={(e) => { \n                        (e.target as HTMLImageElement).onerror = null; \n                        (e.target as HTMLImageElement).src = \"https://placehold.co/400x400/009739/ffffff?text=NRSA\"; \n                    }}\n                />\n            </div>\n            <CardContent className=\"pt-6 text-center\">\n              <h3 className=\"text-xl font-extrabold text-gray-900 leading-snug tracking-tight\">{leader.name}</h3>\n              \n              <p className=\"text-primary font-semibold mt-1 text-md flex items-center justify-center gap-1 mb-3\">\n                <UserCheck className=\"w-4 h-4\" />\n                {leader.position}\n              </p>\n              \n              {leader.state && (\n                <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground mb-3\">\n                    <MapPin className=\"w-4 h-4 text-primary\" />\n                    <span>{leader.state}</span>\n                </div>\n              )}\n\n              {leader.bio && (\n                  <div className=\"text-left pt-4 border-t space-y-3\">\n                    <div className=\"text-sm text-muted-foreground mb-1\">About</div>\n                    <p className=\"text-sm text-foreground/80 line-clamp-3\">{leader.bio}</p>\n                  </div>\n              )}\n              \n              <div className=\"mt-4 text-primary font-semibold text-sm hover:underline\">\n                  Click for Full Bio\n              </div>\n\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Leadership Team - NRSA</title>\n      </Helmet>\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 md:px-12\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Our Visionary Leaders</h1>\n          <p className=\"text-xl md:text-2xl opacity-90 max-w-3xl\">\n            Meet the dedicated team guiding the Nigerian Rope Skipping Association.\n          </p>\n        </div>\n      </section>\n\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          {renderContent()}\n        </div>\n      </section>\n    </>\n  );\n}\n","size_bytes":5574},"server/registerRoutes.ts":{"content":"// server/registerRoutes.ts\nimport { Express } from \"express\";\nimport { registerAllRoutes } from \"./routes\";\n\n/**\n * Main route registration function.\n * Registers all API routes including CRUD operations for all entities.\n * This is called from server/index.ts during application startup.\n */\nexport function registerRoutes(app: Express): void {\n  registerAllRoutes(app);\n  \n  app.get(\"/api/test\", (_req, res) => {\n    res.json({ message: \"Routes working\" });\n  });\n}","size_bytes":468},"server/createAdmin.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\n\nasync function main() {\n  const hashedPassword = await bcrypt.hash(\"SuperSecret123!\", 10);\n\n  const admin = await storage.createAdmin({\n    name: \"Admin\",\n    email: \"admin@example.com\",\n    passwordHash: hashedPassword\n  });\n\n  console.log(\"Admin created:\", admin);\n  process.exit(0);\n}\n\nmain().catch(console.error);\n","size_bytes":385}},"version":2}